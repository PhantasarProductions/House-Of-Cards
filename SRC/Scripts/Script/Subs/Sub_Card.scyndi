// License:
// 
// House of Cards
// Cards
// 
// 
// 
// 	(c) Jeroen P. Broks, 2024
// 
// 		This program is free software: you can redistribute it and/or modify
// 		it under the terms of the GNU General Public License as published by
// 		the Free Software Foundation, either version 3 of the License, or
// 		(at your option) any later version.
// 
// 		This program is distributed in the hope that it will be useful,
// 		but WITHOUT ANY WARRANTY; without even the implied warranty of
// 		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// 		GNU General Public License for more details.
// 		You should have received a copy of the GNU General Public License
// 		along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// 	Please note that some references to data like pictures or audio, do not automatically
// 	fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.10.10 I
// End License
// License Information:
// House of Cards
// Cards
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.04.25
// End License Information

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

#use "Libs/Rosetta"

#use "script/use/gen/config"
#use "script/use/lnk/card"

plua _deckReg = {}

Class PicDeck
	ReadOnly Static Table L2S = { ["H"]=0, ["C"]=1, ["D"]=2, ["S"] = 3, [0]="H",[1]="C",[2]="D",[3]="S" }
	Static Int Count = 0
	ReadOnly Int ID
	ReadOnly Table Cards
	ReadOnly Var Data
	Get String CardDir; Return Data.Value("Dirs","Cards"); End
	
	Var JokerPic(Int Suit) //(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		// Suit and Value sounds a bit strange for a joker, but the values can give some "other" information 
		int JN;JN = (Suit % Data.IntValue("Data","Jokers")) + 1
		string AfFile;AfFile = sprintf("%s/Joker%d.png",CardDir,JN)
		String Tag; Tag=sprintf("PICKDECK_Joker_%08x_%2d",ID,JN)
		Cards[AfFile] = Cards[AfFile] || LoadNewImage(AfFile,Tag)
		Return Cards[AfFile]
	End
	
	Var CardPic(Int Suit,int Value)
		If Value<1; Return Self.JokerPic(Suit); End
		String T;T = sprintf("%d.%02d",Suit,Value)
		Cards[T] = Cards[T] || LoadImage(sprintf("%s/%s%d.png",CardDir,L2S[Suit] || sprintf("Unk.%d.",Suit),Value),sprintf("DECK_CARD_%04x.%s",ID,T))
		Return Cards[T]
	End
	
	Void Draw(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		self.CardPic(Suit,Value).Stretch(X,Y,W,H)
	End
	
	Constructor(_Data)
		Count++
		ID = Count
		Data = _Data
		Cards = {}
	End
End

// A kind of deck that is still pretty basic, yet already more versatile than PicDeck
Class QuickDeck
	Static Int Count=0
	Static ReadOnly Table SuitNames = NewArray("Hearts","Clubs","Diamonds","Spades")
	Static ReadOnly Table SuitLetter = NewArray("H","C","D","S")
	Static ReadOnly Table SuitPic = {}
	Static ReadOnly Var FntReg = {}
	Static Var Blanco
	ReadOnly Int ID
	
	ReadOnly Var Pics
	
	Get String PicDir; Return Data.Value("Dirs","Pic"); End
	Get String FntDir; Return Data.value("Dirs","Fnt"); End
	ReadOnly Var Data
		
	Get Var Fnt
		FntReg[FntDir] = FntReg[FntDir] || {}
		Return FntReg[FntDir]
	End
	
	Static String ValueName(Int V)
		Return Upper(Rosetta.GetStr("CardSymbols",sprintf("CS%d",V)))
	End
	
	Void WCStretch(IMG,Int X, Int Y, Int W, Int H)
		Int SX; SX = X
		Int SY; SY = Y
		Int SW; SW = Img.Width
		Int SH; SH = Img.Height
		Int CX; CX = X + ( W Div 2)
		Int CY; CY = Y + ( H Div 2)
		If SH!=H
			Number R
			R = H/SH
			SH = H
			SW = math.floor(SW*R)
			SX = CX - (SW div 2)
			SY = CY - (SH Div 2)
		End
		If SW>W
			Number R
			R = W/SW
			SW = W
			SH = math.floor(SH*R)
			SX = CX - (SW div 2)
			SY = CY - (SH Div 2)
		End
		IMG.Stretch(SX,SY,SW,SH)
	End
	
	Void DrawJoker(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		// Suit and Value sounds a bit strange for a joker, but the values can give some "other" information 
		string Clown; Clown = Data.Value("Joker","Clown")
		int JN;JN = (Suit % Data.IntValue("Joker","Num")) + 1
		If Clown!=""
			Pics.Clown = Pics.Clown || LoadNewImage(Clown,"JOKER_CLOWN_"..Clown)
			self.WCStretch(Pics.Clown,X,Y,W,H)
		End	
		If Data.IntValue("Joker","Num")>0
			string AfFile;AfFile = sprintf("%s/Joker%d.png",PicDir,JN)
			String Tag; Tag=sprintf("QUICKDECK_Joker_%08x_%2d",ID,JN)
			Pics[AfFile] = Pics[AfFile] || LoadNewImage(AfFile,Tag)
			self.WCStretch(Pics[AfFile],X,Y,W,H)
		End
	End
		
	//Int Stack
	Void Draw(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		//Stack++;CSayF("Beg Stack: %d",Stack)
		Blanco.Stretch(X,Y,W,H)
		If Value<=0
			self.DrawJoker(X,Y,W,H,Suit,Value)
			Return
		End
		SuitPic[Suit] = SuitPic[Suit] || LoadNewImage(sprintf("GFX/Cards/Scripted/Base/%s.png",SuitNames[Suit]),sprintf("SCRIPTED_CARD_SUIT_%d",Suit))
		// Pic
		String SameAndSuit;SameAndSuit = Data.Value("SAME+SUIT",sprintf("CS%d",Value))
		String Afbeelding;Afbeelding = sprintf("%s/%s%d.png",PicDir,SuitLetter[Suit],Value)
		If SameAndSuit!=""
			String Tag; Tag=sprintf("QUICKDECK_SAMDANDSUIT_%08x_%02d",ID,Value)
			Pics[Tag] = Pics[Tag] || LoadNewImage(SameAndSuit,Tag)
			self.WCStretch(Pics[Tag],X,Y,W,H)
			//SuitPic[Suit].Stretch(X,(Y+(H div 2))-(SuitPic[Suit].Width-(W div 2)),W,W)	
			int W2;W2=math.floor(W*0.75)
			SuitPic[Suit].Stretch(X+((W-W2) div 2),(Y+(H div 2))-(W2 div 2),W2,W2)
		ElIf JCR6.EntryExists(Afbeelding)
			Pics[Afbeelding] = Pics[Afbeelding] || LoadNewImage(Afbeelding,sprintf("QUICKDECK_IMG_%s",Afbeelding))
			self.WCStretch(Pics[Afbeelding],X,Y,W,H)
		Else
			plua Kleur;Kleur = SuitPic[Suit]
			Int SH; SH = H div 7 
			Int TY; TY = Y + 25
			Int BY; BY = (Y+H) - (25+SH)
			Int CY; CY = (Y + (H div 2))-(SH div 2)
			INT LX; LX = X + 25
			int RX; RX = (X+W) - (25+SH)
			Int CX; CX = (X + (W div 2))-(SH div 2)
			Switch Value
				// 2 and 3
				Case 3
					Kleur.Stretch(CX,CY,SH,SH)
					FallThrough
				Case 2
					Kleur.Stretch(CX,TY,SH,SH)
					Kleur.Stretch(CX,BY,SH,SH)
					
				// 4, 5, 6 and 7
				Case 4 5 6 7 8 9
					Kleur.Stretch(LX,TY,SH,SH)
					Kleur.Stretch(LX,BY,SH,SH)
					Kleur.Stretch(RX,TY,SH,SH)
					Kleur.Stretch(RX,BY,SH,SH)
					switch Value
						Case 5
							Kleur.Stretch(CX,CY,SH,SH)
						Case 7
							Kleur.Stretch(CX,CY,SH,SH)
							FallThrough
						Case 6 8 9
							Kleur.Stretch(LX,CY,SH,SH)
							Kleur.Stretch(RX,CY,SH,SH)
							Switch Value
								Case 9
									Kleur.Stretch(CX,CY,SH,SH)
									FallThrough								
								Case 8
									Kleur.Stretch(CX,TY,SH,SH)
									Kleur.Stretch(CX,BY,SH,SH)								
							End
					End
				Case 10
					Int Y10;Y10 = (Y+H)-25
					Int H10;H10 = (H-50) div 5
					Int W10;W10 = math.max(H10,SH)
					For i=0,4
						Kleur.Stretch(LX,TY+(i*H10),W10,W10)
						Kleur.Stretch(RX,TY+(i*H10),W10,W10)
					End
				Default
					self.WCStretch(Kleur,X,Y,W,H)				
			End
		End
		
		// Value + Suit
		Int SW=0
		Int VH=0
		String V;V=Self.ValueName(Value)
		Int VX;VX = X+5
		Int VY;VY = Y+5
		switch Suit%2
			case 0; SetColor(255,0,0)
			case 1; SetColor(0,0,0)
			default
				SetColor(255,180,0)
		End
		For i=1,Len(V)
			Int C;C=Lua.string.byte(Mid(V,i,1))
			Fnt[C] = Fnt[C] || LoadNewImage(sprintf("%s/%d.png",FntDir,C),sprintf("DECKFONT:%s:%d",FntDir,C))
			Fnt[C].Draw(VX,VY)
			VX = VX + Fnt[C].Width
			SW=SW + Fnt[C].Width
			VH=math.max(VH,Fnt[C].Height)
		End
		SetColor(255,255,255)
		SuitPic[Suit].Stretch(5+X,VY+VH,SW,SW)
		//Stack--;CSayF("End Stack: %d",Stack)
	End
	
	Constructor(_Data)
		ID = Count; Count++		
		Data=_Data
		Pics = {}
		Blanco = Blanco || LoadNewImage("GFX/Cards/Scripted/Base/Blanco.png","BLANCO")
	End
End

Class QuickSuit
	Static ReadOnly Table SuitNames = NewArray("Hearts","Clubs","Diamonds","Spades")
	Static ReadOnly Table SuitLetter = NewArray("H","C","D","S")
	Static ReadOnly Table SuitPic = {}
	ReadOnly Table SuitIcon = {}
	Static ReadOnly Table ColTags = {}
	Static Int Count=0
	Static Var Blanco
	ReadOnly Int ID
	ReadOnly Var Data
	ReadOnly Var Pics
	
	Get String PicDir; Return Data.Value("Dirs","Pic"); End
	Get String FntDir; Return Data.value("Dirs","Fnt"); End
		
	Get Var Fnt		
		QuickDeck.FntReg[FntDir] = QuickDeck.FntReg[FntDir] || {}
		Return QuickDeck.FntReg[FntDir]
	End
	
	String ValueName(Int V)
		Return Upper(Rosetta.GetStr("CardSymbols",sprintf("CS%d",V)))
	End
	
	Void WCStretch(IMG,Int X, Int Y, Int W, Int H)
		Int SX; SX = X
		Int SY; SY = Y
		Int SW; SW = Img.Width
		Int SH; SH = Img.Height
		Int CX; CX = X + ( W Div 2)
		Int CY; CY = Y + ( H Div 2)
		If SH!=H
			Number R
			R = H/SH
			SH = H
			SW = math.floor(SW*R)
			SX = CX - (SW div 2)
			SY = CY - (SH Div 2)
		End
		If SW>W
			Number R
			R = W/SW
			SW = W
			SH = math.floor(SH*R)
			SX = CX - (SW div 2)
			SY = CY - (SH Div 2)
		End
		IMG.Stretch(SX,SY,SW,SH)
	End
	
	Void DColor(Cat,ColTag)
		String CHSV
		String CRGB
		switch Lua.type(ColTag)
			case "string"
				CHSV="HSV"..ColTag
				CRGB="RGB"..ColTag
			case "number"
				CHSV=sprintf("HSV%d",ColTag)
				CRGB=sprintf("RGB%d",ColTag)
			default
				Lua.error("Coltag error!")
		End
		ColTags[Cat]=ColTags[Cat]||{}
		ColTags[Cat][ColTag] = ColTags[Cat][ColTag] || {}
		if !ColTags[Cat][ColTag].HSV
			if Data.Value("Colors."..Cat,CHSV)!=""
				plua s;s = XSplit(Data.Value("Colors."..Cat,CHSV),",")
				plua d;d = Data.IntValue("Colors."..Cat,"HSVD"); If d==0; d=100; End
				ColTags[Cat]=ColTags[Cat]||{}
				ColTags[Cat][ColTag].HSV = {}
				ColTags[Cat][ColTag].HSV.Hue = (Lua.tonumber(s[0]) || 0)
				ColTags[Cat][ColTag].HSV.Sat = (Lua.tonumber(s[1]) || 0) / d
				ColTags[Cat][ColTag].HSV.Val = (Lua.tonumber(s[2]) || 0) / d
				CSayF("HSV for %s:%s  -> (d:%s) -> %s,%s,%s",Cat,CHSV,d,ColTags[Cat][ColTag].HSV.Hue,ColTags[Cat][ColTag].HSV.Sat,ColTags[Cat][ColTag].HSV.Val)
			Else
				CSayF("No HSV for %s:%s",Cat,CHSV)
				ColTags[Cat]=ColTags[Cat]||{}
				ColTags[Cat][ColTag].HSV = "No"
			End
		End
		If !ColTags[Cat][ColTag].RGB
			if Data.Value("Colors."..Cat,CRGB)!=""
				plua s;s = XSplit(Data.Value("Colors."..Cat,CRGB),",")
				//plua d;d = Raw.IntValue("Colors.ColTag","RGBD"); If d==0; d=100; End
				ColTags[Cat]=ColTags[Cat]||{}
				ColTags[Cat][ColTag].RGB = {}
				ColTags[Cat][ColTag].RGB.Red   = (Lua.tonumber(s[0]) || 0)
				ColTags[Cat][ColTag].RGB.Green = (Lua.tonumber(s[1]) || 0)
				ColTags[Cat][ColTag].RGB.Blue  = (Lua.tonumber(s[2]) || 0)
			Else
				ColTags[Cat]=ColTags[Cat]||{}
				ColTags[Cat][ColTag].RGB = "No"
			End
		End
		If ColTags[Cat][ColTag].RGB!="No"
			SetColor(ColTags[Cat][ColTag].RGB.Red,ColTags[Cat][ColTag].RGB.Green,ColTags[Cat][ColTag].RGB.Blue)
		ElIf ColTags[Cat][ColTag].HSV != "No"
			SetColorHSV(ColTags[Cat][ColTag].HSV.Hue,ColTags[Cat][ColTag].HSV.Sat,ColTags[Cat][ColTag].HSV.Val)
		End
	End
		
	Void DrawBlanco(Int X, Int Y, int W, Int H,String Cat, ColTag)
		self.DColor(Cat,ColTag)	
		Blanco.Stretch(X,Y,W,H)
		SetColor(255,255,255,255)
	End
	
	Void Draw(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		//Stack++;CSayF("Beg Stack: %d",Stack)
		If Value<=0
			self.DrawJoker(X,Y,W,H,Suit,Value)			
			Return
		End
		SuitPic[Suit] = SuitPic[Suit] || LoadNewImage(sprintf("GFX/Cards/Scripted/Base/%s.png",SuitNames[Suit]),sprintf("SCRIPTED_CARD_SUIT_%d",Suit))
		self.DrawBlanco(X,Y,W,H,"Blanco",Suit)
		SuitIcon[Suit] = SuitIcon[Suit] || LoadNewImage(sprintf("%s/Suit%d.png",PicDir,Suit),sprintf("QuickSuit_%d_%d",ID,Suit))
		self.WCStretch(SuitIcon[Suit], X,  Y,  W,  H)
				// Value + Suit
		Int SW=0
		Int VH=0
		String V;V=QuickDeck.ValueName(Value)
		Int VX;VX = X+5
		Int VY;VY = Y+5
		switch Suit%2
			case 0; SetColor(255,0,0)
			case 1; SetColor(0,0,0)
			default
				SetColor(255,180,0)
		End
		For i=1,Len(V)
			Int C;C=Lua.string.byte(Mid(V,i,1))
			Fnt[C] = Fnt[C] || LoadNewImage(sprintf("%s/%d.png",FntDir,C),sprintf("DECKFONT:%s:%d",FntDir,C))
			Fnt[C].Draw(VX,VY)
			VX = VX + Fnt[C].Width
			SW=SW + Fnt[C].Width
			VH=math.max(VH,Fnt[C].Height)
		End
		SetColor(255,255,255)
		SuitPic[Suit].Stretch(5+X,VY+VH,SW,SW)
		//Stack--;CSayF("End Stack: %d",Stack)
	End
		

	Void DrawJoker(Int X, Int Y, Int W, Int H,Int Suit, Int Value)
		string Clown; Clown = PicDir .. "/Joker.png"
		int JN;JN = (Suit % Data.IntValue("Joker","Num")) + 1
		Self.DrawBlanco(X,Y,W,H,"Blanco",Sprintf("J%d",JN))
		If Clown!=""
			Pics.Clown = Pics.Clown || LoadNewImage(Clown,"JOKER_CLOWN_"..Clown)
			self.WCStretch(Pics.Clown,X,Y,W,H)
		End	
		//If Data.IntValue("Joker","Num")>0
		//	string AfFile;AfFile = sprintf("%s/Joker%d.png",PicDir,JN)
		//	String Tag; Tag=sprintf("QUICKDECK_Joker_%08x_%2d",ID,JN)
		//	Pics[AfFile] = Pics[AfFile] || LoadNewImage(AfFile,Tag)
		//	self.WCStretch(Pics[AfFile],X,Y,W,H)
		//End
	End
	
	Constructor(_Data)
		QuickDeck.Blanco = QuickDeck.Blanco || LoadNewImage("GFX/Cards/Scripted/Base/Blanco.png","BLANCO")
		Blanco = QuickDeck.Blanco
		Data=_Data
		Pics = {}
		Blanco = Blanco || LoadNewImage("GFX/Cards/Scripted/Base/Blanco.png","BLANCO")
		SuitIcon = {}
	End	
End

Global Var LoadDeckPics(string DeckFile)
	string DF;DF = Upper(DeckFile)
	If !_deckReg[DF]
		plua d;d = GINIE.LoadNew(sprintf("Data/Decks/%s.ini",DeckFile),sprintf("DECK_%s",DeckFile))
		Switch Upper(d.Value("Data","Graphics"))
			Case "PICTUREFOLDER"
				_deckReg[DF] = New PicDeck(d)
			case "QUICK" "QUICKDECK"
				_deckReg[DF] = New QuickDeck(D)
			case "QUICKSUIT"
				_deckReg[DF] = New QuickSuit(D)
			Case "SCRIPT"
				Lua.error("Script based decks not yet implented!")
			Default
				Lua.error(sprintf("I don't know how to deal with deck graphics type %s (%s)",d.Value("Data","Graphics"),DeckFile))
		End
	End
	Return _deckReg[DF]
End

Global Void DrawDeckPic(string DeckFile,Int X,int Y,Int W, Int H,Int Suit,Int Value)
	plua _P
	_P = Lua.assert(LoadDeckPics(DeckFile),sprintf("DrawDeckPic(\"%s\",%d,%d,%d,%d,%d,%d): Nil received!",DeckFile,X,Y,W,H,Suit,Value))
	_P.Draw(X,Y,W,H,Suit,Value)
End


// Are you actually reading all this? 
