// License Information:
// House Of Cards
// Edit global configuration
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.03.07
// End License Information
Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/SString"

#use "Libs/Rosetta"

#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"


#region Items
Bool Always(); return True; End
Class ConfigItem
	Static Int Cnt = 0
	Static Var First = Nil
	Static Var Last = Nil
	
	Var Next = Nil
	Var Prev = Nil
	
	ReadOnly String RTag
	ReadOnly Delegate Action
	ReadOnly Delegate Allow
	ReadOnly Delegate Value
	ReadOnly Int ID
		
	Get Int Y
		Return 200+(ID*35)
	End
	
	Static ReadOnly Int X = Graphics.Width div 2
	
	Constructor(String _T,_Act,_Val,_All)
		ID     = Cnt; Cnt++ 
		RTag   = _T
		Action = _Act
		Value  = _Val
		Allow  = _All || Always
		If Last
			Last.Next = Self
			Prev = Last
		End
		First  = First || Self
		Last   = Self
		CSayF("Config item %s created",RTag)
	End
	
	Destructor
		CSayF("Config item %s destroyed",RTag)
	End
End

#endregion

#region Language
plua Langs
int LangIndex = 0

Var ScanLangs()
	CSayF("Scanning resource for languages")
	Langs = {}
	plua _L = JCR6.Dir("Lang")
	For L In Each(_L)
		String LN = Trim(StripAll(L))
		CSayF("=> Found: %s (%s)",LN,L)
		If (Upper(LN))==Upper(Config.Language); LangIndex=Len(Langs); End
		Langs[Len(Langs)] = LN		
	End
	Return Langs
End

String LangVal(); Return Rosetta.GetStr("Language","Name"); End
Void LangAct()
	Langs           = Langs || ScanLangs()
	LangIndex       = (LangIndex+1)%Len(Langs)	
	//Config.Language = Langs[LangIndex]
	Rosetta.Lang    = Langs[LangIndex]
	CSayF("Index %d (Langs %d) -> %s (Config: %s, Rosetta: %s)",LangIndex,Len(Langs),Langs[LangIndex],Config.Language,Rosetta.Lang)	
End
#endregion

#region Background
String BackgroundVal(); Return Config.BackName; End
Void BackGroundAct()
	Sys.LoadNewState("FLOW_BACKGROUND","Script/Flow/Flow_Background.lbc")
	GoToFlow("BACKGROUND")
End
#endregion

#region Deck
plua Decks
Int DeckIndex
Init
	Decks = {}
	plua D;D = JCR6.Dir("Data/Decks")
	Config.CFG.NewValue("Deck","Global","Base Deck")
	For I,E in ipairs(D)
		Decks[I] = {["Entry"]=E,["Show"]=StripAll(E)}
		If Config.CFG.Value("Deck","Global")==StripAll(E); DeckIndex = I; End
	End	
End

String DeckVal(); Return Config.CFG.Value("Deck","Global"); End
Void DeckAct()
	DeckIndex = (DeckIndex+1) % Len(Decks)
	Config.CFG.Value("Deck","Global",Decks[DeckIndex].Show)
End

#endregion

#region BackSide
plua BackSideIndex=-1
plua BackSideFiles
String BackSideV(); Return StripAll(Config.BackSide); End
Void BackSideA()
	If !BackSideFiles
		BackSideFiles = JCR6.Dir("GFX/BackSides")
		For i,v in pairs(BackSideFiles)
			If Upper(v)==Upper(Config.BackSide)
				BackSideIndex=i
			End
		End
	End
	BackSideIndex = (BackSideIndex + 1) % Len(BackSideFiles)
	Config.BackSide = BackSideFiles[BackSideIndex] 
	CSayF("Backside: %03d/%03d >> %s",BackSideIndex,Len(BackSideFiles),Config.BackSide)
End

#region Back
String BackVal(); Return ""; End
Void BackAct(); Sys.CurrentFlow = "MAINMENU"; End
#endregion



#region Initize
Init
	plua i
	i = New ConfigItem("Language",LangAct,LangVal)
	i = New ConfigItem("Background",BackgroundAct,BackgroundVal)
	i = New ConfigItem("Deck",DeckAct,DeckVal)
	i = New ConfigItem("BackSide",BackSideA,BackSideV)
	i = New ConfigItem("Back",BackAct,BackVal)
	// Prevent trouble with memory trashing
	ConfigItem.Last = nil
End
#endregion




#region Flow
Plua Logo = ObtainImage("Logo")
Plua Fnt  = ObtainFont("Ryanna")
Int Hue = os.time()
Global Void MainFlow()
	Hue = (Hue+1)%360
	If Events.AppTerminate(); Sys.Exit(); End
	DrawBackground()
	Logo.Draw(Graphics.Width div 2,25)
	Plua Item;Item = ConfigItem.First
	Repeat
		SetColor(255,255,255)
		If MY>Item.Y && MY<Item.Y+30
			SetColorHSV(360-Hue,1,0.5)
			SetAlpha(127)
			Rect(0,Item.Y,Graphics.Width,30)
			SetColorHSV(Hue,1,1)
			SetAlpha(255)
			If ML && ITEM.Allow()
				ITEM.Action()
			End
		End
		Text("CONFIG",Item.RTag,Item.X-5,Item.Y,1)
		SetColor(255,180,0)
		Fnt.Text(Item.Value(),Item.X+10,Item.Y)
		Item = Item.Next
	LoopWhile Item
	SetColor(255,255,255)	
	ShowMouse()
End
#endregion