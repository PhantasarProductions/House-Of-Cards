// License Information:
// House Of Cards
// Klondike Script
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.03.27
// End License Information
Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SGJCR"
#use "Libs/SCI/Graphics"

#use "Libs/XMath"
#use "Libs/Stacker"

#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"
#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/Sound"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/SeedLog"
#use "Script/Use/Gen/QCardWrite"
#use "Script/Use/Gen/GameFeatures"


ReadOnly Var PPP = LoadNewImage("Script/Game/Spider/PointPackages.png","SPIDER_PPP") // Why not re-use stuff, eh?
ReadOnly Var MNI = ObtainFont("MINI")
ReadOnly Var RYA = ObtainFont("RYANNA")
ReadOnly Var ESC = ObtainImage("SUCCESS")
ReadOnly Var OKE  = ObtainImage("OK")

plua KLO_CardSize = Lua.Scyndi.Class.CardSize.FromW(Graphics.Width div 11)
plua KLO_Card
plua KLO_Draw
plua KLO_Disc // Not the right word but by lack of a better term
plua KLO_Clear
plua KLO_Cleared // Clear = nodes, Cleared = cards
plua KLO_RowNodes
plua KLO_Row
plua KLO_Deck
plua KLO_DrawPile
Plua KLO_DiscPile
plua KLO_DiscShow = {}
plua KLO_Config = GINIE.Obtain("CONFIG::KLONDIKE")
plua KLO_Icon = LoadNewImage("Script/Game/Klondike/Klondike.png","KLONDIKE_ICON")
plua KLO_DragCards = nil
plua KLO_SeedLog
bool KLO_TimeRunning
int  KLO_Time
int  KLO_Moves
int  KLO_Undone
 

Int KLO_State = 0
// 0 = Playing
// 1 = Win
// 2 = Auto-Solving

int hue = os.time()

Class CardNode
	Static Int Num
	Static Number Deg = os.time() % 360
	Static Var First
	Static Var Last
	Var Next
	ReadOnly Int ID
	ReadOnly Int X
	ReadOnly Int Y
	Static Get Int W;Return KLO_CardSize.W; End
	Static Get Int H;Return KLO_CardSize.H; End

		
	Void Draw()
		Deg = Deg + 0.01
		SetColor(100,100,100)
		SetAlpha(math.floor(math.abs(XMath.Sin(Deg+(ID*10))*255)))
		Rect(X,Y,KLO_CardSize.W,KLO_CardSize.H)
	End
	
	Static Void DrawAll()
		For c in Each_Chain(First)
			c.Draw()
		End
		SetAlpha(255)
	End
		
	Constructor(Int _X,Int _Y)
		ID = Num;Num++
		First = First || Self
		if (Last); Last.Next = Self; End
		Last = Self
		X = _X
		Y = _Y
		CSayF("Card Node created at (%04d, %04d)",X,Y)
	End
End


Class KlondikeCard
	Int GoToX
	Int GoToY
	Int X
	Int Y
	Get Int W;Return KLO_CardSize.W; End
	Get Int H;Return KLO_CardSize.H; End
	Bool Visible = False
	Var Card
	
	Void Go(V1,V2,V3)
		switch(lua.type(V1))
			case "table";  GotoX = V1.X + (V2 || 0); GotoY = V1.Y + (V3 || 0);
			case "number"; GotoX = V1; GotoY=V2
			case "nil";
			default; Lua.error("Illegal card constructor") 
		end
	End
	
	Void Draw()
		if X>GoToX; X = x - math.max(1,math.abs(X-GotoX) div 10); End
		if Y>GoToY; Y = Y - math.max(1,math.abs(Y-GotoY) div 10); End
		if X<GoToX; X = x + math.max(1,math.abs(GotoX-X) div 10); End
		if Y<GoToY; Y = Y + math.max(1,math.abs(GotoY-Y) div 10); End
		If Visible
			KLO_Card.DrawCard(X,Y,Card.CardSuit,Card.CardValue)
		Else
			KLO_Card.DrawBack(X,Y)
		End	
	End
	
	Constructor(V1,V2,V3)
		switch math.random(1,4)
			case 1; X = graphics.width +math.random(1,1000); Y = math.random(-1000,Graphics.Height+1000)
			case 2; X =                -math.random(1,1000); Y = math.random(-1000,Graphics.Height+1000)
			case 3; Y = graphics.height+math.random(1,1000); X = math.random(-1000,Graphics.Width +1000)
			case 4; Y =                -math.random(1,1000); X = math.random(-1000,Graphics.Width +1000)
			default; X = -1000; Y=-1000 // Cash prevention. This is only cosmetic after all!
		end
		Self.Go(V1,V2,V3)
	End
End

Class KlondikeAction
	ReadOnly Static Var UndoButton = ObtainImage("UNDO")
	ReadOnly Static Var Stacked = New Stack()
	ReadOnly String     Cmd
	ReadOnly Int        FromRow
	ReadOnly Int        ToRow
	ReadOnly Int        NumCards
	ReadOnly Int        HiddenCards
	Constructor(String _Cmd,Int _FR=0,Int _TR=0,Int _NC=1,Int _HC=0)
		Cmd         = Upper(_Cmd)
		FromRow     = _FR
		ToRow       = _TR
		NumCards    = _NC
		//HiddenCards = _HC
		If (Cmd=="DRAG" || Cmd=="CLEAR") && _FR>=0 
			int Cnt=0
			for c in each(KLO_Row[_FR])
				If !c.visible; cnt++; end
			end
			HiddenCards=cnt
		End
	End
	
	Static Void Add(String _Cmd,Int _FR=0,Int _TR=0,Int _NC=1,Int _HC=0)
		plua n
		n = new KlondikeAction(_Cmd,_FR,_TR,_NC,_HC)
		Stacked.Push(n)		
		CSayF("Stacked action: %s - From %d to %d - Cards moved: %d",_Cmd,_FR,_TR,_NC,_HC)
	End
	
	Static Void Undo()
		//CSay("Undo not yet implemented")
		if (!Stacked.Have); Return; End
		plua Act;Act = Stacked.Pop()
		Switch Act.Cmd
			Case "DRAW"
				for i=1,Act.NumCards
					plua p = KLO_DiscPile.pop()
					if (!p); Lua.error("Internal error! Undo with empty discpile. Please report!"); End
					KLO_DrawPile.Push(p)
					KLO_DiscShow = KLO_DiscPile.Array					
				End
				SFX("SLIDE")
			Case "RESET"
				SFX("SLIDE")
				While KLO_DrawPile.Have
					plua p = KLO_DrawPile.Pop()
					KLO_DiscPile.Push(p)
					p.X=math.random(Graphics.Width,Graphics.Width*10)
					p.y=math.random(Graphics.Height,Graphics.Height*10)
				End
				KLO_DiscShow = KLO_DiscPile.Array
			Case "CLEAR"
				plua p
				p = KLO_Cleared[Act.ToRow][len(KLO_Cleared[Act.ToRow])-1]
				if (!p); Lua.error(sprintf("Internal error! Undo with empty clearpile (%d). Please report!",Act.ToRow)); End
				KLO_Cleared[Act.ToRow][len(KLO_Cleared[Act.ToRow])-1]=nil
				KLO_Row[Act.FromRow][len(KLO_Row[Act.FromRow])]=p
				for i,c in ipairs(KLO_Row[Act.FromRow])
					c.visible=i>=Act.HiddenCards
				end
				SFX("SLIDE")
			case "DRAG"
				SFX("SLIDE")
				switch -Act.FromRow
				Case 1
					int p;p=len(KLO_Row[Act.ToRow])-1
					KLO_DiscPile.Push(KLO_Row[Act.ToRow][p])
					KLO_Row[Act.ToRow][p].Go(KLO_Disc)
					KLO_Row[Act.ToRow][p]=nil
					KLO_DiscShow = KLO_DiscPile.Array
					
				Case 2
					int p;p=len(KLO_Row[Act.ToRow])-1
					Lua.assert(Lua.Scyndi.Globals.ClearedCard(p),"Internal error: Undo drag back from clear didn't work! Please report!")
					KLO_Row[Act.ToRow][p]=nil
				Default
					//plua c = {}
					Int l;l=len(KLO_Row[Act.ToRow])
					For i=1,Act.NumCards
						plua crd;crd=KLO_Row[Act.ToRow][l-i]
						//c[Cmd.NumCards-i]=KLO_Row[Act.FromRow][l-i]
						KLO_Row[Act.ToRow][l-i]=nil
						KLO_Row[Act.FromRow][len(KLO_Row[Act.FromRow])]=crd
						
					End
					For i,c in ipairs(KLO_Row[Act.FromRow])
						c.visible=i>=Act.HiddenCards
					End
				end			
			Default
				Lua.error("Undo: Unknown Action: "..Act.Cmd)
		End
	End
	
	Static Void CheckUndoButton()
		If KLO_State!=0 || (!Stacked.Have)
			Return
		End
		If MX<64 && MY>Graphics.Height-64
			SetColorHSV(Hue,1,1)
			If ML
				KlondikeAction.Undo()
			End
		End
		UndoButton.Stretch(0,Graphics.Height-64,64,64)
		SetColor(255,255,255)
	End
End

Init
	KLO_Card = KLO_CardSize.Bind()

	// Piles
	KLO_Draw = new CardNode(5,5)
	KLO_Disc = new CardNode(10+KLO_CardSize.W,5)
	
	// Cleared
	KLO_Clear = {}
	KLO_Clear[0] = New CardNode( 5               ,Graphics.Height-math.floor(KLO_CardSize.H * 2.6))
	KLO_Clear[1] = New CardNode(10+KLO_CardSize.W,Graphics.Height-math.floor(KLO_CardSize.H * 2.6))
	KLO_Clear[2] = New CardNode( 5               ,Graphics.Height-math.floor(KLO_CardSize.H * 1.50))
	KLO_Clear[3] = New CardNode(10+KLO_CardSize.W,Graphics.Height-math.floor(KLO_CardSize.H * 1.50))
	KLO_RowNodes = {}
	For i=0,6
		int x
		x = Graphics.Width- ((KLO_CardSize.W*1.25)*(7-i))
		KLO_RowNodes[i] = New CardNode(x,10)
	End
End

Global Void GameFeatures_SaveExit_Action()
	plua SG;
	plua SG = SGJCR.Create("SAVE:KLONDIKE")
	SG.Assign("House Of Cards.SaveGame.KLONDIKE.jcr")
	SG.Clear()	
	CSay("= General"); SG.Text["General.ini"] = sprintf("[Check]\nEngine=Scyndi's Creative Interpreter\nProject=House Of Cards\nGame=Klondike\n\n[Data]\nScore=%d\nTime=%d\nFromPile=%d\n\n\n",0,KLO_Time,KLO_CONFIG.INTVALUE("CONFIG","FROMPILE"))
	
	CSay("= Table")
	plua oput = "# Rows: Klondike\n\n"
	For ri,ra in pairs(KLO_Row)
		oput = oput .. sprintf("\n[R%d]\nSize=%d\n",ri,len(ra))
		for ci,ca in pairs(ra)
			oput = oput .. sprintf("C%02dSuit=%d\n",ci,ca.Card.CardSuit)
			oput = oput .. sprintf("C%02dValue=%d\n",ci,ca.Card.CardValue)
			oput = oput .. sprintf("C%02dVisble=%s\n",ci,ca.Visible)
		end
	End
	SG.Text["Table.ini"] = oput
	
	CSay("= Piles")
	oput = "# Klondike piles\n\n"
	For k,p in pairs{["Draw"]=KLO_DrawPile.Array,["Disc"]=KLO_DiscPile.Array}
		oput = oput .. sprintf("\n[%s]\nsize=%d\n",k,len(p))
		For i,c in ipairs(p)
			oput = oput .. sprintf("C%02dSuit=%d\nC%02dValue=%d\n",i,c.Card.CardSuit,i,c.card.CardValue)
		End
	End
	SG.Text["Piles.ini"] = oput
	
	CSay("= Cleared")
	oput = "# Klondike Cleared\n\n[Clear]\n"
	For i=0,3
		oput = oput .. sprintf("P%d=%d\n",i,len(KLO_Cleared[i] || {}))	
	End
	SG.Text["Cleared.ini"] = oput
	CSay("= Saving")
	SG.Save()
	CSay("= Done")
	GoToFlow("SELECTGAME")
End

Global Bool GAMEFEATURES_SAVEEXIT_ALLOW(); Return KLO_State==0; End

Global Bool ClearCard(c)
	plua suit;suit = c.card.cardsuit
	plua val; val  = c.card.cardvalue
	KLO_Cleared[suit] = KLO_Cleared[suit] || {}
	plua cpil; cpil=KLO_Cleared[suit]
	CSayF("Trying to clear %d:%d",suit,val)
	CSayF("- Pile for suit #%d has size %d",suit,len(cpil))
	if val==len(cpil)+1		
		KLO_TimeRunning=true
		cpil[len(cpil)]=c		
		cpil.Quick=false 
		c.Go(KLO_Clear[suit])
		bool win=true
		int cnt=0
		for _,cp in pairs(KLO_Cleared)
			cnt++
			win = win && (len(cp)==13)
		end
		if Win && cnt==4
			KLO_State=1
			SFX("COMPLETE")
			KLO_Config.Value("RESULT","WON",KLO_Config.IntValue("Result","Won")+1)
			KLO_SeedLog.Won++
		End
		return true
	end
	CSayF("- Card %d:%d cannot be cleared",suit,val)
	return false
end

Get Bool Dragging	
	If !KLO_DragCards		
		Return False
	ElIf MY>KLO_Clear[0].Y && MX<KLO_Clear[1].X + KLO_Clear[1].W && Len(KLO_DragCards)==1 && (!MDL) && ClearCard(KLO_DragCards[0])
		KlondikeAction.Add("Clear",KLO_DragCards.Row,KLO_DragCards[0].Card.CardSuit)
		if KLO_DragCards.Row==-1
			KLO_DiscPile.Pop()
		Else 
			KLO_Row[KLO_DragCards.Row][len(KLO_Row[KLO_DragCards.Row])-1]=nil
		End
		KLO_DragCards = nil
		Return False
	ElIf !MDL
		//Int AtRow = -1
		For Ri,RA in ipairs(KLO_Row)
			plua RN;RN=KLO_RowNodes[Ri]
			   // Mouse position          Not the same row            // Kings on an empty row                            // Other card value                                                   // Red is not black and vice versa
			If MX>RN.X && MX<RN.X+RN.W && ri!=KLO_DragCards.Row && ( (KLO_DragCards[0].Card.CardValue==13 && Len(RA)==0) || (Len(RA)>0 && KLO_DragCards[0].Card.CardValue==RA[Len(RA)-1].Card.CardValue-1 && KLO_DragCards[0].Card.CardSuit % 2!=RA[Len(RA)-1].Card.CardSuit % 2)) 
				For di,dc in ipairs(KLO_DragCards)
					RA[Len(RA)]=DC					
				End
				KlondikeAction.Add("Drag",KLO_DragCards.Row,ri,Len(KLO_Dragcards))
				SFX("SLIDE")
				// Two loops to prevent conflicts
				if KLO_DragCards.Row==-1
					KLO_DiscPile.Pop()
					KLO_DiscShow = KLO_DiscPile.Array
				Else 
					plua OldRow;OldRow = KLO_Row[ KLO_DragCards.Row ]
					//For di,dc in ipairs(KLO_DragCards)
					For di=Len(OldRow)-1,Len(OldRow)-(Len(KLO_Dragcards)),-1
						//KLO_Row[KLO_DragCards.Row][di+KLO_DragCards.Card] = nil
						OldRow[di]=nil
					End
				End
				KLO_DragCards = nil
				Return False
			End
		End
		if KLO_DragCards.Row==-1
			KLO_DragCards[0].GoToX = KLO_Disc.X
			KLO_DragCards[0].GoToY = KLO_DragCards.OY
		End
		KLO_DragCards = nil
	Else
		For di,dc in ipairs(KLO_DragCards)
			DC.GotoX = MX - (DC.W div 2)
			DC.GotoY = MY + (di*45)
			DC.X = DC.GotoX
			DC.Y = DC.GotoY
		End
	End
	KLO_TimeRunning=true
	Return True 
End

Void Deal()
	int dp=0
	KLO_Row = {}	
	For i2=0,6		
		For i1=i2,6
			KLO_Row[i1] = KLO_Row[i1] || {}
			CSayF("Dealing card on row %d:%d",i1,i2)
			plua crd;crd = new KlondikeCard(KLO_RowNodes[i1])
			KLO_Row[i1][i2] = crd
			crd.Card = KLO_Deck[dp]
			dp++
		End
	End
	KLO_DrawPile = New Stack()
	KLO_DiscPile = New Stack()
	//KLO_DrawShow = {}
	KLO_DiscShow = {}
	For i=51,dp,-1
		plua crd;crd = new KlondikeCard(KLO_Draw)
		crd.Card = KLO_deck[i]
		KLO_DrawPile.Push(crd)
	End
End

Void DrawCards()
	SetColor(255,255,255,255)
	// Rows on the table
	plua _DoubleML = DoubleML
	plua _Dragging;_Dragging=(!_DoubleML) && Dragging
	For ri,ra in ipairs(KLO_Row)
		int Hovering=-1
		int mody=0
		int cinvisible=0
		For ci,ca in ipairs(ra)
			If (!_Dragging)
				ca.Go(KLO_RowNodes[ri],0,mody)
			End
			ca.Visible = ca.Visible || ci==len(ra)-1
			ca.Draw()
			If ca.Visible
				Mody=Mody+31
				If (!_Dragging) && MX>ca.X && MY>ca.Y && MX<ca.X+ca.W && MY<ca.Y+ca.H
					Hovering=ci
				End
			Else
				cinvisible++
				Mody=Mody+5
			End
		End
		if (cinvisible>0); MNI.Dark(Lua.tostring(cinvisible),KLO_RowNodes[ri].X,KLO_RowNodes[ri].Y); End
		if Hovering>=0
			plua ci;ci=Hovering
			plua ca;ca=ra[ci]
			if ca
				PPP.Stretch(ca.X-64,ca.Y-64,64,64)
				QCardWrite.Show(Graphics.Width div 2,Graphics.Height-96,ca.Card.CardSuit,ca.Card.CardValue)
				If _DoubleML && Hovering+1==len(ra)
					If ClearCard(ca)
						SFX("SLIDE")
						KlondikeAction.Add("Clear",ri,ca.Card.CardSuit)
						ra[Hovering]=nil
					End
				ElIf MDL
					KLO_DragCards = { ["Row"]=ri, ["Card"]=ci }
					Int di=0
					Repeat
						KLO_DragCards[len(KLO_DragCards)]=ra[di+ci]
						di++
					LoopWhile ra[di+ci]
				End
			End
		End
	End

	// Draw Pile
	If KLO_DrawPile.Have
		KLO_Card.DrawBack(KLO_Draw.X,KLO_Draw.Y)
		If MX>KLO_Draw.X && MY>KLO_Draw.Y && MX<KLO_Draw.X+KLO_Draw.W && MY<KLO_Draw.Y+KLO_Draw.H 
			PPP.Stretch(0,0,64,64)
			If ML
				SFX("SLIDE")
				KLO_TimeRunning=true
				For k in Each(KLO_DiscPile.Array); k.GotoY=KLO_Disc.Y; k.Y = KLO_Disc.Y; k.visible=true; End
 				KlondikeAction.Add("Draw",0,0,KLO_CONFIG.INTVALUE("CONFIG","FROMPILE"))
				For i=0,KLO_CONFIG.INTVALUE("CONFIG","FROMPILE")-1
					// Seems double, but the 3 card draw needs it.					
					If KLO_DrawPile.Have
						plua dcard = KLO_DrawPile.Pop()
						KLO_DiscPile.Push(dcard)
						dcard.x = KLO_Draw.X
						dcard.y = KLO_Draw.Y
						dcard.gotox = KLO_Disc.X
						dcard.gotoy = KLO_Disc.Y + (i*40)
						dcard.visible = true
						//KLO_DiscShow[i] = dcard
					End					
				End 
				KLO_DiscShow = KLO_DiscPile.Array
			End // if ML
		End // if
	Else
		If (!_Dragging)  && KLO_DiscPile.Have && MX>KLO_Draw.X && MY>KLO_Draw.Y && MX<KLO_Draw.X+KLO_Draw.W && MY<KLO_Draw.Y+KLO_Draw.H
			PPP.Stretch(0,0,64,64)
			If ML
				SFX("SLIDE")
				KLO_DrawPile = New Stack()
				KlondikeAction.Add("Reset")
				While KLO_DiscPile.have
					plua dcard = KLO_DiscPile.Pop()
					dcard.visible=0
					KLO_DrawPile.Push(dcard)
				End // While
				KLO_DiscPile = New Stack()
				KLO_DiscShow = {}
			End // If Mouse click
		End // If (check if I should drag cards)
	End // Else
	
	
	// Disc pile
	For i=len(KLO_DiscShow)-1,0,-1
		KLO_DiscShow[i].Draw()
		KLO_DiscShow[i].Visible=true
	End // For 
	plua top = KLO_DiscShow[0]
	If top && MX>KLO_Disc.x && MY>top.y && MX<top.x+top.w && MY<top.y+top.h && (!_Dragging)
		PPP.Stretch(top.x-(top.w div 2),0,64,64)
		QCardWrite.Show(Graphics.Width div 2,Graphics.Height-96,top.Card.CardSuit,top.Card.CardValue)
		if _DoubleML
			CSayF("Pile card clear request")
			If ClearCard(top)
				SFX("SLIDE")
				KlondikeAction.Add("Clear",-1,top.Card.CardSuit) // KLO_DragCards[0].Card.CardSuit
				KLO_DiscPile.Pop()
				KLO_DiscShow = KLO_DiscPile.Array
			End // cleared?
		elif MDL
			KLO_DragCards = { ["Row"]=-1, ["Card"]=0,[0]=top, ["OY"]=top.gotoY }
		End // double for clear 
	End // if top card
	// Clear Piles
	for i,cp in pairs(KLO_Cleared)
		//CSayF("Drawing cleared pile #%d (L:%02d)",i,len(cp)) // DEBUG ONLY!
		If len(cp)!=0			
			If cp.Quick
				KLO_Cleared[i][len(KLO_Cleared[i])-1].Draw()
			Else				
				cp.Quick = true
				For cpi,cpc in ipairs(cp)
					cpc.Visible=true
					cpc.Go(KLO_Clear[i])
					cp.Quick = cp.Quick && cpc.X==cpc.GoToX && cpc.Y==cpc.GoToY
					cpc.Draw()
				End // For loop
				if cp.Quick; CSayF("Clear pile #%d set to quick!",i); End
			End // sp.quick if ith else
		End // if length of cp
	End	// for loop i,cp
End // End function

Int AutoSolveFrames=5

Void StateControl()
	Switch KLO_State
		Case 0
			Return
		Case 1
			int okx = (Graphics.Width div 2)-32
			int oky = (Graphics.Height)-64
			ESC.Draw(Graphics.Width div 2,Graphics.Height div 2)
			If MX>okx && MY>oky && MX<okx+64
				SetColorHSV(hue,1,1)
				If ML
					GotoFlow("SELECTGAME")
				End
			End
			OKE.Stretch(okx,oky,64,64)
			SetColor(255,255,255,255)
		Case 2
			// AutoSolve
			If AutosolveFrames>0
				AutosolveFrames--
			Else
				If KLO_DiscPile.Have && ClearCard(KLO_DiscPile.Value)
					KLO_DiscPile.Pop()
					KLO_DiscShow=KLO_DiscPile.Array
					AutosolveFrames=5
				//ElIf (!KLO_DiscPile.Have) && (KLO_DrawPile.Have)
				ElIf (KLO_DrawPile.Have)
					plua c=KLO_DrawPile.Pop()
					KLO_DiscPile.Push(c)
					KLO_DiscShow=KLO_DiscPile.Array
					AutosolveFrames=5
				ElIf (KLO_DiscPile.Have) && (!KLO_DrawPile.Have)
					While KLO_DiscPile.Have
						plua c = KLO_DiscPile.Pop()
						KLO_DrawPile.Push(c)
						KLO_DiscShow=KLO_DiscPile.Array
					End
					AutosolveFrames=5
				End
				For ri,ra in ipairs(KLO_Row)
					plua ci;ci=len(ra)-1
					plua ca;ca=ra[ci]
					If ca && ClearCard(ca)
						ra[ci]=nil
						AutosolveFrames=5
					End
				End
			End
			//Lua.error("Auto-solve not yet operational")
			If (os.time() % 2 == 0)
				Rya.Dark("Auto solve",Graphics.Width div 2, Graphics.Height div 2,2,2)
			End
		Default
			Lua.error("Unknown Klondike State")
	End
End


Void CheckAutoSolve()
	If (KLO_State!=0); Return; End
	For i,r in ipairs(KLO_Row)
		//if len(r)!=0; Return; End
		For ci,cc in ipairs(r)
			If !cc.visible; Return; End
		End
	End
	If KLO_CONFIG.INTVALUE("CONFIG","FROMPILE")!=1
		if KLO_DrawPile.Have || KLO_DiscPile.Have; Return; End
	End
	if MY>250 && MY<280 && MX<Rya.Width("Autosolve")
		SetColor(Hue,1,1)
		If ML;KLO_State=2; End
	End
	Rya.Dark("Autosolve",0,250)
	SetColor(255,255,255)
End
	
	
Global Void GameNew(String CShuffle="")
	KLO_State=0
	KLO_Config.Value("Result","Played",KLO_Config.IntValue("Result","Played")+1)
	GameFeatures.ShuffleTag="DECK_Klondike"
	plua slxn = sprintf("Draw%d",KLO_CONFIG.INTVALUE("CONFIG","FROMPILE"))
	KLO_SeedLog = SeedLog.StartLog("KLONDIKE",slxn)
	KLO_SeedLog.Played++
	If CShuffle!=""
		Lua.error("Loading shuffles not yet supported")
	Else
		Klo_Deck = Deck.Shuffle("DECK_KLONDIKE",KLO_Config.Value("Shuffle","Shuffle"))
	End
	KLO_Cleared = {}
	Deal()
	KLO_Time=0
	KLO_TimeRunning=False
End

Global Void GameContinue()
	plua SG;
	plua SG = SGJCR.Create("LOAD:KLONDIKE")
	SG.Assign("House Of Cards.SaveGame.KLONDIKE.jcr")
	SG.Load()
	plua d
	
	// General
	d = GINIE.Parse(SG.Text["General.ini"],"KLONDIKE:LOAD")
	KLO_Time = d.IntValue("Data","Time")
	KLO_CONFIG.VALUE("CONFIG","FROMPILE",d.IntValue("Data","FromPile"))
	
	// Cleared
	d = GINIE.Parse(SG.Text["Cleared.ini"],"KLONDIKE:LOAD")
	KLO_Cleared = {}
	for i=0,3
		int c;c = d.IntValue("Clear",sprintf("P%d",i))
		KLO_Cleared[i] = {}
		if c>0
			for j=1,c				
				KLO_Cleared[i][j-1] = new KlondikeCard(KLO_Clear[i])
				KLO_Cleared[i][j-1].Card = New DeckCard(i,j)
			end
		end
	end
	
	// Piles
	d = GINIE.Parse(SG.Text["Piles.ini"],"KLONDIKE:LOAD")
	KLO_DrawPile = New Stack()
	KLO_DiscPile = New Stack()
	For k,p in pairs{["Draw"]={KLO_DrawPile,KLO_Draw},["Disc"]={KLO_DiscPile,KLO_Disc}}		
		int c;c = d.Intvalue(k,"size")
		if c>0
			plua pa = {}
			For i=0,c-1
				plua crd; crd = new KlondikeCard(p[2])
				crd.Card = New DeckCard(D.IntValue(k,sprintf("C%02dSuit",i)),D.IntValue(k,sprintf("C%02dValue",i)))
				pa[len(pa)]=crd
				//crd.Visible = lower(D.Value(k,sprintf("C%02dVisible",i)))=="true"
			End
			CSayF("= Stacking %s (%s)",lua.type(pa),pa)
			p[1].PushArray(pa)
		end		
	End
	
	// Table
	d = GINIE.Parse(SG.Text["Table.ini"],"KLONDIKE:LOAD")
	KLO_Row={}
	for ri=0,6
		string tag;tag = sprintf("R%d",ri)
		int l;l = d.intvalue(tag,"size")
		plua ra = {}
		KLO_Row[ri]=ra
		if l>0
			For ci=0,l-1
				plua ca;ca = new KlondikeCard(0,0)
				ra[len(ra)]=ca
				ca.Card = New DeckCard(D.IntValue(tag,sprintf("C%02dSuit",ci)),D.IntValue(tag,sprintf("C%02dValue",ci)))
				ca.Visible = lower(D.Value(tag,sprintf("C%02dVisible",ci)))=="true"
			End
		end
	end
End

Int OldTime
Void CheckTime()
	if KLO_TimeRunning && KLO_State==0
		If OldTime!=0 && OldTime!=os.time()
			KLO_Time++
		End
		OldTime=os.time()
	End
	SetColor(255,255,255,255)
	ShowTime(KLO_Time,5,KLO_Draw.Y+KLO_Draw.H+10)
End

Global Void MainFlow()
	hue = (hue+1)%360
	SetColor(255,255,255,255)
	DrawBackground()
	CardNode.DrawAll()
	DrawCards()
	CheckTime()
	KLO_Icon.Stretch(Graphics.Width-64,Graphics.Height-64,64,64)
	GameFeatures.Button()
	StateControl()
	CheckAutoSolve()
	KlondikeAction.CheckUndoButton()
	ShowMouse()
	If KLO_SeedLog; KLO_SeedLog.ShowSeed(5,Graphics.Height-20); End
End


// DEBUG
global Void DBG_JAT()
	for ri,ra in ipairs(KLO_Row)
		if ra[0] && (!ra[0].visible)
			KLO_DiscPile.Push(ra[0])
			ra[0].visible=true
			ra[0].Go(KLO_Disc)
			for i=0,len(ra)-1;ra[i]=ra[i+1];end
			CSayF("Nicked a card from row #%d",ri)
		end
	end
End
Init
	Sys.ConsoleLocal("JAT","DBG_JAT")
End