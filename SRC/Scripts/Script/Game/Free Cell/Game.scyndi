// License Information:
// House of Cards
// Free Cell
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.04.03
// End License Information

Script

#region Use

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SGJCR"
#use "Libs/SCI/Events"
#use "Libs/SCI/Graphics"

#use "Libs/xMath"
#use "Libs/Stacker"

#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"
#use "Script/use/Gen/SeedLog"

#use "Script/Use/Gen/Ach"
#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/Sound"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/QCardWrite"
#use "Script/Use/Gen/GameFeatures"

#endregion

#region "General Assets"
ReadOnly Var PPP = LoadNewImage("Script/Game/Spider/PointPackages.png","SPIDER_PPP")
ReadOnly Var Fnt = ObtainFont("RYANNA")
ReadOnly Var ESC = ObtainImage("SUCCESS")
ReadOnly Var EFL = ObtainImage("FAIL")
ReadOnly Var UND = ObtainImage("UNDO")
ReadOnly Var ICO = LoadNewImage("Script/Game/Free Cell/Icon.png","FreeCell_ICON")
ReadOnly Var OKE = ObtainImage("OK")
ReadOnly Var MNI = ObtainFont("MINI")
#endregion

#Region Cards
Plua CardSize = Lua.Scyndi.Class.CardSize
//ReadOnly Var FRC_CardSize = CardSize.FromW(Graphics.Width div 11)
ReadOnly Var FRC_CardSize = CardSize.FromH(Graphics.Height div 5)
ReadOnly Var FRC_FreeCell = {}
ReadOnly Var FRC_Clear    = {}
ReadOnly Var FRC_Row      = {}
ReadOnly Var FRC_Config = GINIE.Obtain("CONFIG::FREE CELL")
	
ReadOnly Var W4 = Graphics.Width div 4
	

Var FRC_Deck
Int FRC_State
Var FRC_Card
Int FRC_Time
Int FRC_Moves
Int FRC_Undone
Var FRC_DragCards

plua FRC_CheckAutoClear
Get bool FRC_AutoClear
	plua ret = FRC_CheckAutoClear && Upper(FRC_Config.Value("Config","AutoClear"))=="YES"	
	if Ret;FRC_CheckAutoClear = False;End
	Return Ret
End

#EndRegion

#region "Crap"
Int Hue
#endregion

#region "Free Cells and clearing spots"
Bool Cleared(Crd)
	//Sys.TraceBack()
	//Printf("\x1b[37mClear Request: (%d:%02d)",Crd.Suit,Crd.Val)
	FRC_Clear[Crd.Suit].Cards = FRC_Clear[Crd.Suit].Cards || {}
	if Crd.Val==Len(FRC_Clear[Crd.Suit].Cards)+1
		Frc_Clear[Crd.Suit].Cards[Len(FRC_Clear[Crd.Suit].Cards)]=Crd
		Frc_Clear[Crd.Suit].Quick=False
		Crd.IsCleared=True
		//PrintF("\x1b[32m Granted!\x1b[0m\n")
		FRC_CheckAutoClear=true
		Return True
	End
	//PrintF("\x1b[31m Denied!\x1b[0m\n")
	Return False
End 

Bool ToFreeCell(Crd)
	FRC_Clear[Crd.Suit].Cards = FRC_Clear[Crd.Suit].Cards || {}
	if Len(FRC_Clear[Crd.Suit].Cards)>=Crd.Val
		CSayF("Trying to send a cleared card to a free cell! This should NEVER happen! Request ignored!")
		Return False
	End
	for i,fc in ipairs(FRC_FreeCell) 
		If !fc.Cards
			fc.Cards=Crd
			Crd.GX=fc.X
			Crd.GY=fc.Y
			FRC_CheckAutoClear=true
			Return true
		End
	End
	Return False
End

Var GetFreeCell(Crd)
	for i,fc in pairs(FRC_FreeCell)
		If fc.Cards && Crd.Val==fc.Cards.Val && Crd.Suit==Fc.Cards.Suit; Return fc; End
	End
	Return nil
End

Get Int FreeCells
	int ret = 0
	for n in each(FRC_FreeCell)
		if !n.Cards;ret++;end
	end
	return ret
End

Int CFreeRows(cn)
	if lua.type(cn)=="number"; return CFreeRows(FRC_Row[cn]); end
	int ret=0
	for n in each(FRC_Row) 		
		if n!=cn && Len(n.Cards||{})==0;ret++;End
	end
	Return ret;
end

Get Int FreeRows
	return CFreeRows(nil)
End

Bool CanMove(int c,n)
	CSayF("Can I move %d cards with %d free cells and %d free rows at my disposal?",c,FreeCells,CFreeRows(n))
	return c<=(Freecells+1)*(CFreeRows(n)+1)
End

#endregion

Class Action
	ReadOnly Static Var Stck = New Stack()
	ReadOnly String Act
	ReadOnly Var Crd
	ReadOnly Var Node
	ReadOnly Var NNode
		
	Constructor(String _Act,_Crd,_Node,_NNode)
		Act   = Upper(_Act)
		Crd   = _Crd
		Node  = _Node
		NNode = _NNode
		FRC_Moves++
		SFX("SLIDE")
	End
	
	Static Var Add(_Act,_Crd,_Node,_NNode)
		plua ret;ret = new Action(_Act,_Crd,_Node,_NNode)
		Stck.Push(ret)
		FRC_CheckAutoClear=true
		Return ret
	End
	
End

Class FCard
	Static Int StartTimer=0
	Int GX
	Int GY
	Int X = math.random(0,graphics.width)
	Int Y = math.random(graphics.height,graphics.height*2)	
	Int Timer
	Var Crd
	Get Int Suit;return Crd.CardSuit;End
	Get Int Val;Return Crd.CardValue;End
	Get Int W;Return FRC_CardSize.W; End
	Get Int H;Return FRC_CardSize.H; End
	Bool IsCleared = False
	
	Void Draw()
		SetAlpha(255)
		If Timer>0
			Timer--
			Return
		End
		FRC_Card.DrawCard(X,Y,Crd.CardSuit,Crd.CardValue)
		If X<GX; X = X + math.max(1,(GX-X) div 10); ElIf X>GX; X = X - math.max(1,(X-GX) div 10); End
		If Y<GY; Y = Y + math.max(1,(GY-Y) div 10); ElIf Y>GY; Y = Y - math.max(1,(Y-GY) div 10); End
		FRC_CheckAutoClear=FRC_CheckAutoClear||X!=GX||Y!=GY
		//CSayF("Card on (%d,%d) is going to (%d,%d)",X,Y,GX,GY)
	End
	
	Constructor(C)
		Timer = StartTimer
		StartTimer = StartTimer + 3
		Crd=C
	End
End
	

Class CardNode
	Static ReadOnly Var TN = NewArray("Row","FreeCell","Clear")
	Static ReadOnly Var NT = {}
	Static ReadOnly Var Nodes = {}
	ReadOnly Var Me
	ReadOnly Int X
	ReadOnly Int Y
	Get Int W; Return FRC_CardSize.W; End
	Get Int H; Return FRC_CardSize.H; End
	ReadOnly Int Type
	Get String TypeString; Return TN[Type]; End
	Var Cards
	Bool Quick = False
	
	Static Void RemoveFrom(FromNode)
		Switch FromNode.Type
			case 0 2
				if Len(FromNode.Cards)>0
					FromNode.Cards[Len(FromNode.Cards)-1]=nil
				End
			case 1
				FromNode.Cards=nil
			default; Lua.error("Remove from unknown node type: #"..FromNode.Type)
		End
	End
	
	Static Void AddTo(Crd,ToNode)
		If Crd.IsCleared
			CSayF("Trying to add a cleared card to node (type:%d). Request ignored!")
			Return
		End
		Switch ToNode.Type
			case 0 2
				ToNode.Cards = ToNode.Cards || {}
				ToNode.Cards[Len(ToNode.Cards)] = Crd
			Case 1
				Lua.assert(ToNode.Cards==nil,"Trying to add a card to an occupied cell. This can only happen when there's a bug. Please report!")
			default; Lua.error("Add to unknown node type: #"..ToNode.Type)
		End
	End
	
	Static Get Bool IsDragging
		If (!FRC_DragCards)
			Return False
		End
		For i,c in ipairs(FRC_DragCards)
			c.GX = MX - (FRC_CardSize.W div 2)
			c.GY = MY + (i*35)
			c.X  = c.GX
			c.Y  = c.GY
		End
		if (!MDL)
			// TODO: Actions
			For n in Each(Nodes)
				Switch n.Type
					case 0
						If MX>n.X && MX<n.X+n.W && n!=FRC_DragCards.OldNode
							// One card (the multiple card auto setup comes later)
							SetAlpha(95); SetColorHSV(hue,1,1); Rect(n.x,0,n.W,Graphics.Height,2) // Debug
							plua DC;DC=FRC_DragCards[0]
							if Len(FRC_DragCards)==1
								//plua DC;DC=FRC_DragCards[0]
								if (Len(n.Cards)==0) ||( n.Cards[len(n.Cards)-1].Val-1==DC.Val && n.Cards[len(n.Cards)-1].Suit%2!=DC.Suit%2)
									n.Cards[len(n.Cards)]=DC							
									Action.Add("Drag",DC,FRC_DragCards.OldNode,n)
									Self.RemoveFrom(FRC_DragCards.OldNode)
									//Self.AddTo(DC,n)
									FRC_DragCards=nil
									Break
								End
							Elif CanMove(Len(FRC_DragCards),n)
								if (Len(n.Cards)==0) ||( n.Cards[len(n.Cards)-1].Val-1==DC.Val && n.Cards[len(n.Cards)-1].Suit%2!=DC.Suit%2)
									Action.Add("MultiDrag",FRC_DragCards,FRC_DragCards.OldNode,n)
									For crd in Each(FRC_DragCards)
										Self.RemoveFrom(FRC_DragCards.OldNode)
										n.Cards[len(n.Cards)]=crd
									End
								End
							End
						End
					case 1
						If MX<n.W && MY>n.Y && MY<n.y+n.H && (!n.Cards) && Len(FRC_DragCards)==1
							n.Cards=FRC_DragCards[0]							
							Action.Add("Drag",FRC_DragCards[0],FRC_DragCards.OldNode,n)
							Self.RemoveFrom(FRC_DragCards.OldNode)
							FRC_DragCards=nil
							break // This ain't C/C++/Java/C#/php/JavaScript etc. Here "break" only terminates loops. Remember "FallThrough" is a keyword here.
						End
					case 2
						//plua clr;clr=Cleared(FRC_DragCards[0])
						//print( MX>Graphics.Width-n.W , MY>n.Y , MY<n.y+n.H , Len(FRC_DragCards)==1 , clr," Clear drag?" ) // DEBUG ONLY!
						if MX>Graphics.Width-n.W && MY>n.Y && MY<n.y+n.H && Len(FRC_DragCards)==1 && Cleared(FRC_DragCards[0])
							Action.Add("Drag",FRC_DragCards[0],FRC_DragCards.OldNode,n)
							Self.RemoveFrom(FRC_DragCards.OldNode)
							FRC_DragCards=nil
							break
						end
					default; Lua.error("Dragging to unknown node type: "..n.Type)
				End
			End
			FRC_DragCards=nil
		End
		Return FRC_DragCards!=nil
	End
	
	Void Draw()
		plua _ML = ML
		plua _DoubleML = DoubleML
		plua _Dragging = IsDragging
		SetAlpha(150)
		SetColorHSV(hue,1,1)
		Rect(X,Y,FRC_CardSize.W,FRC_CardSize.H)
		SetColor(255,255,255)
		//Fnt.Text(sprintf("NT: %d",Type),X,Y) // Debug only!
		Switch Type
			Case 0
				Int Hover=-1
				Bool ValidHover=False
				Bool LastHover=False
				if lua.type(Cards)!="table"; CSayF("ALARM! CARDS HAS HAD A TYPE CHANGE TO %s",lua.type(Cards)); End
				For i,crd in ipairs(Cards || {})
					Crd.Draw()
					If !_Dragging
						Crd.GX=X
						Crd.GY=Y+(i*30)
						If MX>Crd.GX && MY>Crd.GY && MX<Crd.GX+Crd.W && MY<Crd.GY+Crd.H
							Hover=i
							ValidHover=True
							LastHover = i ==len(Cards)-1
							For i2,crd2 in pairs(Cards)							
								if i2>i
									ValidHover = ValidHover && (Cards[i2-1].Suit%2!=Cards[i2].Suit) && (Cards[i2-1].Val-1==Cards[i2].Val)
								End
							End
						End
					End
				End
				If ValidHover			
						plua crd;crd=Cards[Hover]
						SetColor(255,255,255,255)
						//CSayF("Valid hover. DoubleClick:%s; Click:%s; LastHover:%s",_DoubleML,_ML,LastHover)
						If _DoubleML && LastHover
							If Cleared(Crd)
								CSayF("Clearing %d:%d",Crd.Suit,Crd.Val)
								Crd.IsCleared=True
								Action.Add("Clear",Crd,Self,FRC_Clear[Crd.Suit])
								Cards[Hover]=nil
								Return
							ElIf ToFreeCell(Crd)
								CSayF("To Free Cell %d:%d",Crd.Suit,Crd.Val)
								Action.Add("FreeCell",Crd,Self,GetFreeCell(Crd))
								Cards[Hover]=nil
								Return
							End
						ElIf MDL
							FRC_DragCards={["OldNode"]=Self}
							For i,crd in ipairs(Cards)
								If i>=Hover
									FRC_DragCards[Len(FRC_DragCards)]=crd
								End
							End
						End
				Else
						SetColor(100,100,100)
				End
				If Hover>=0					
					plua crd;crd=Cards[Hover]
					If (!crd)
						CSayF("\007\x1b[32mWARNING!\x1b[0mNil hover detected! >> %d",Hover)
						return
					End
					PPP.Stretch(Crd.GX-64,Crd.GY-64,64,64)
					QCardWrite.Show(Graphics.Width div 2,Graphics.Height-96,crd.Suit,crd.Val)
				End
			Case 1
				if Cards
					If !_Dragging
						Cards.GX=X
						Cards.GY=Y
						If MX>X && MY>Y && MX<X+W && MY<Y+H
							SetColor(255,255,255,255)
							PPP.Stretch(X+(W div 2)-64,Y+(H div 2)-64,64,64)
							QCardWrite.Show(Graphics.Width div 2,Graphics.Height-96,cards.Suit,cards.Val)
							If MDL
								FRC_DragCards = {[0]=Cards, ["OldNode"]=Self}
							End	
						End
					End
					Cards.Draw()
				End
			Case 2
				Cards = Cards || {}
				If Len(Cards)>0
					if Quick
						Cards[Len(Cards)-1].Draw()
					Else
						Quick=True
						For i,crd in ipairs(Cards)						
							Crd.GX=X
							Crd.GY=Y
							Quick = Quick && Crd.X==X && Crd.Y==Y
							Crd.Draw()
							Crd.IsCleared=True
						End
					End
					if MX>self.X && MY>Self.Y && MY<self.Y+self.H && Len(Cards)>0
						SetColor(100,100,100)
						QCardWrite.Show(Graphics.Width div 2,Graphics.Height-96,cards[len(cards)-1].Suit,cards[len(cards)-1].Val)
					End
				End
			Default;	Lua.error("Node type error on drawing")
		End															
	End
	
	Static Void DrawAll()
		For n in Each(Nodes)
			n.Draw()
		End
	End
	
	Bool Add(c)
		If Type==1
			if Cards; return False; End
			Cards = c
			Return true
		End
		Cards = Cards || {}
		Cards[len(Cards)]=c
		//CSay("Card %s added to %s",c,self)
		Return True
	End
	
	Constructor(_Type,Int _X,Int _Y,Int _Suit=0)
		Me = Self
		Switch Lua.type(_Type)
			case "string"
				_Type=upper(_Type)
				if (!NT[_Type])
					For i,v in ipairs(TN); NT[Upper(v)]=i; End
				End
				Type = NT[_Type]
			case "number"
				Type=_Type
		End
		Lua.assert(TN[Type],sprintf("Unknown Card Node Type: %s",_Type))
		X = _X
		Y = _Y
		Nodes[len(Nodes)]=Self
		CSayF("Node (%d:%s) created on (%d,%d)",Type,TN[Type],X,Y)
	End					
	
End

Init
	Int BaseY = math.floor((Graphics.Height div 2)-(FRC_CardSize.Height*2.5))
	For i=0,3
		Int Y; Y = BaseY + math.floor((i*1.0625)*FRC_CardSize.Height)
		FRC_FreeCell[i] = New CardNode("FreeCell",0,Y)
		FRC_Clear[i]    = New CardNode("Clear",Graphics.Width-FRC_CardSize.Width,Y,i)
	End
	For i=0,7
		Int X; X = math.floor((i*1.123)*FRC_CardSize.Width)+(FRC_CardSize.Width*1.123)
		FRC_Row[i] = New CardNode("Row",X,5)
	End
End
	


Void CellSpace()
	SetColor(0,0,0)
	SetAlpha(math.floor(math.abs(100*xmath.sin(hue))+150))
	Rect(0,0,FRC_CardSize.W,Graphics.Height)
	Rect(Graphics.Width-FRC_CardSize.W,0,FRC_CardSize.W,Graphics.Height)
End

Bool Safe2Clear(crd)
	plua ret=true
	if crd.X!=crd.GX || Crd.Y!=crd.GY; Return False; End
	if crd.val<=2; return True; End
	For s,n in pairs(FRC_Clear)
		If s%2!=crd.Suit%2
			ret = ret && len(n.Cards||{})>=crd.val-1
		End
	end
	Return ret
End

Void CheckAutoClear()
	If !FRC_AutoClear; Return; End
	For n in each(CardNode.Nodes)
		Switch n.Type
			Case 0
				plua crd
				If Len(n.Cards||{})>=1
					crd=n.Cards[Len(n.Cards)-1]
					If Safe2Clear(crd) && Cleared(crd)
						Action.Add("Clear",crd,n,FRC_Clear[crd.Suit])
						CardNode.RemoveFrom(n)
						Return
					End
				End
			Case 1
				plua crd;crd=n.Cards
				if crd && Safe2Clear(crd) && Cleared(crd)
					Action.Add("Clear",crd,n,FRC_Clear[crd.Suit])
					CardNode.RemoveFrom(n)
					Return
				End
			Case 2
				// Do nothing. After all, this is already cleared
			Default
				Lua.error(sprintf("Unknown node type(%d) in autoclear",n.Type))
		End											
	End
End

Void Deal()
	FCard.StartTimer=0
	For i=0,7
		FRC_Row[i].Cards=nil
	End
	For i=0,3
		FRC_Clear[i].Cards=nil
		FRC_FreeCell[i].Cards=nil
	End	
	For i=0,51
		FRC_Row[i%8].Add(new FCard(FRC_Deck[i]))
	End	
End

Void UndoAction()
	If FRC_State!=0 || (!Action.Stck.Have)
		Return
	End
	FRC_Undone++
	plua LAct = Action.Stck.Pop()
	Switch LAct.Act
		Case "FREECELL" "TOFREECELL"
			LAct.Node.Cards[Len(LAct.Node.Cards)]=LAct.NNode.Cards
			LAct.NNode.Cards=nil
		Case "CLEAR"
			plua ccrd
			ccrd = LAct.NNode.Cards[len(LAct.NNode.Cards)-1]
			LAct.NNode.Cards[len(LAct.NNode.Cards)-1] = nil
			LAct.Node.Cards[Len(LAct.Node.Cards)]=ccrd
		Case "DRAG"
			plua ccrd
			switch LAct.NNode.Type
				case 0 2
					ccrd = LAct.NNode.Cards[len(LAct.NNode.Cards)-1]
					LAct.NNode.Cards[len(LAct.NNode.Cards)-1] = nil
				case 1
					ccrd = LAct.NNode.Cards
					LAct.NNode.Cards = nil
				default
					Lua.error("Undo drag old node type unknown: "..LAct.NNode.Type)
			End
			CSayF("Undo drag one card (%d:%02d)",ccrd.suit,ccrd.val)
			CardNode.AddTo(ccrd,LAct.Node)		
		Case "MULTIDRAG"
			for crd in each(LAct.crd)
				LAct.NNode.Cards[len(LAct.NNode.Cards)-1] = nil
				CardNode.AddTo(crd,LAct.Node)
			end
		Default; lua.error("I don't know how to undo: "..LAct.Act)
	End
End	

Void UndoButton()
	If FRC_State!=0 || (!Action.Stck.Have)
		Return
	End
	SetColor(255,255,255)
	if MX<96 && MY>Graphics.Height-96
		SetColorHSV(Hue,1,os.time() % 2)
		If ML
			UndoAction()
		End
	End
	UND.Stretch(0,Graphics.Height-96,96,96)
End

Int OldTime
Void GameStats()
	Int NewTime=os.time()
	Int Y = Graphics.Height-30
	If (OldTime!=NewTime) && FRC_Moves>0 && FRC_State==0
		FRC_Time++
		OldTime=NewTime
	End
	SetColor(255,255,255)
	ShowTime(FRC_Time,W4,Y,2)
	ShowMoves(FRC_Moves,FRC_Undone,W4*3,Y,2)
End

Void CheckVictory()
	Switch FRC_State
		case 0
			Plua Win=true
			For i=0,3
				Win=Win&&FRC_Clear[i].Cards&&Len(FRC_Clear[i].Cards)>=13
			End
			If Win
				FRC_State=1
				SFX("COMPLETE")
				Ach.Award("FREECELL_COMPLETE")
				// TODO: Count win
			End
			Return
		case 1
			ESC.Draw(Graphics.Width div 2, Graphics.Height div 2)
		case 2
			EFL.Draw(Graphics.Width div 2, Graphics.Height div 2)
		default; lua.error("Unknown game state: "..FRC_State)
	End
	Int X=(Graphics.Width div 2)-48
	Int Y=(Graphics.Height) - 96
	If MX>X && MX<X+90 && MY>Y
		SetColorHSV(Hue,1,((os.time() % 2)/2)+0.5)
		If ML
			GoToFlow("SELECTGAME")
		End
	End
	OKE.Stretch(X,Y,96,96)
End
		
#region General Callbacks
Global Bool GameFeatures_SaveExit_Allow(); Return FRC_State==0; End

Global Void GAMEFEATURES_SAVEEXIT_ACTION()
	plua out={}
	plua cnt={}
	For n in each(CardNode.Nodes)
		switch n.Type
			case 0
				cnt.rows = (cnt.rows || -1) + 1  
				out.rows = (out.rows || "") .. sprintf("[Row%d]\nSize=%d\n",cnt.rows,len(n.Cards))				
				for i,c in ipairs(n.Cards || {})
					out.rows = out.rows .. sprintf("C%02dS=%d\nC%02dV=%s\n",i,c.suit,i,c.val)
				End
			case 1
				plua c = n.Cards
				If C
					cnt.cells = (cnt.cells || -1) + 1				
					out.cells = (out.cells || "[Cells]\n") .. sprintf("C%02dS=%d\nC%02dV=%s\n",cnt.cells,c.suit,cnt.cells,c.val)
				end
			case 2
				if Len(n.Cards)>0
					out.cleared = (out.cleared || "[Cleared]\n") .. sprintf("C%d=%d\n",n.Cards[0].Suit,len(n.Cards))
				End
		End
	End
	plua totalout = "# House Of Cards\n# Free Cell\n# (c) Jeroen P. Broks\n\n"
	for k,v in pairs(out)
		totalout = totalout .. v .. "\n\n"
	End
	totalout = totalout..sprintf("\n\n[General]\nMoves=%d\nUndone=%d\nTime=%d\n",FRC_Moves,FRC_Undone,FRC_Time)
	plua SG = SGJCR.Create("SAVE:FREECELL")
	SG.Assign("House Of Cards.SaveGame.Free Cell.jcr")
	SG.Clear()
	SG.Text.FreeCell = totalout
	SG.Save()
	GotoFlow("SELECTGAME")
End

Global Void GameContinue()
	plua SG = SGJCR.Create("LOAD:FREECELL")
	SG.Assign("House Of Cards.SaveGame.Free Cell.jcr")
	FRC_Card = FRC_CardSize.Bind()
	FCard.StartTimer=0
	For i=0,7
		FRC_Row[i].Cards=nil
	End
	For i=0,3
		FRC_Clear[i].Cards=nil
		FRC_FreeCell[i].Cards=nil
	End
	SG.Load()
	plua SD;SD=GINIE.Parse(SG.Text.FreeCell,"FREE CELL LOADED DATA")
	FRC_State = 0
	FRC_Moves = SD.Intvalue("General","Moves")
	FRC_Undone = SD.IntValue("Gneral","Undone")
	FRC_Time = SD.Intvalue("General","Time")
	For ri=0,7
		Frc_Row[ri].Cards = {}
		plua C;C=Frc_Row[ri].Cards
		string Tag;Tag = sprintf("Row%d",ri)
		for ci=0,SD.IntValue(Tag,"Size")-1
			C[ci] = New FCard(New DeckCard(SD.IntValue(Tag,sprintf("C%02dS",ci)),SD.IntValue(Tag,sprintf("C%02dV",ci))))
		End
	End
	For i=0,3
		// Free Cell
		plua fcs;fcs=SD.IntValue("Cells",sprintf("C%02dS",i))
		plua fcv;fcv=SD.IntValue("Cells",sprintf("C%02dV",i))
		CSayF("Cell: %d->%d:%02d",i,fcs,fcv)
		If FCV>0
			FRC_FreeCell[i].Cards = New FCard(New DeckCard(fcs,fcv))
		End
		// Cleared
		For s=0,3
			FRC_Clear[s].Cards={}
			For v=1,SD.IntValue("Cleared",sprintf("C%d",s))
				FRC_Clear[s].Cards[Len(FRC_Clear[s].Cards)]=new FCard(New DeckCard(s,v))
			End
		End
	End
	GameFeatures.ShuffleTag="DECK_Free_Cell"		
End
	
	

Global Void GameNew(String CShuffle="")
	FRC_Card = FRC_CardSize.Bind()
	
	FRC_State=0
	FRC_Moves=0
	FRC_Undone=0
	FRC_Time=0
	
	//KLO_Config.Value("Result","Played",KLO_Config.IntValue("Result","Played")+1)
	GameFeatures.ShuffleTag="DECK_Free_Cell"
	//FRC_SeedLog = SeedLog.StartLog("FREECELL")
	//FRC_SeedLog.Played++
	If CShuffle!=""
		Lua.error("Loading shuffles not yet supported")
	Else
		FRC_Deck = Deck.Shuffle("DECK_FREECELL",FRC_Config.Value("Shuffle","Shuffle"))
	End
	Deal()
End

Global Void MainFlow()
	hue = (hue+1)%360
	SetColor(255,255,255,255)
	DrawBackground()
	CellSpace()
	CardNode.DrawAll()
	UndoButton()
	GameFeatures.Button()
	ICO.Stretch(Graphics.Width-96,Graphics.Height-96,96,96)
	CheckAutoClear()
	CheckVictory()
	GameStats()
	ShowMouse()	
	//FRC_SeedLog.ShowSeed()

End
#endregion