// License Information:
// House of Cards
// Spiderette
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.05.01
// End License Information
Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/Graphics"

#use "Libs/XMath"
#use "Libs/Stacker"

#use "Script/Use/Gen/Ach"
#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"
#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/Sound"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/SeedLog"
#use "Script/Use/Gen/QCardWrite"
#use "Script/Use/Gen/GameFeatures"

#undef Use_SeedLog

#region BaseVars
ReadOnly Var ICO = LoadNewImage("Script/Game/Spiderette/Icon.png","ICON_SPIDERETTE")
ReadOnly Var MNI = ObtainFont("MINI")
ReadOnly Var GLD = ObtainFont("GOLD")
ReadOnly Var PPP = LoadNewImage("Script/Game/Spider/PointPackages.png","SPIDER_PPP")	
ReadOnly Int QUD = Graphics.Width div 4
Int ICOSIZE=Graphics.Height
#region

#Region GameVars
plua SPR_Config = GINIE.Obtain("CONFIG::SPIDERETTE")
plua SPR_CardSize = Lua.Scyndi.Class.CardSize.FromW(Graphics.Width div 11)
plua SPR_Card
plua SPR_Draw
plua SPR_CLEAR
plua SPR_RowNodes
plua SPR_SeedLog
plua SPR_Cleared
plua SPR_Row
plua SPR_Deck
plua SPR_DrawPile
int SPR_Moves
int SPR_Undone
int SPR_State
int SPR_Time
#EndRegion

#region Configration
Get Int Suits; Return SPR_Config.IntValue("CONFIG","SUITS"); End

// Will allow to deal an extra package of cards even if some rows are empty.
// That is, when set to 'true' that is.
Get Bool AllowEmpty; Return Upper(SPR_Config.Value("CONFIG","ALLOWEMPTY"))=="YES"; End

Get String ShuffleMethod; Return SPR_Config.Value("Shuffle","Shuffle"); End
#endregion


#region Classes
Class CardNode
	Static Int Num
	Static Number Deg = os.time() % 360
	Static Var First
	Static Var Last
	Var Next
	ReadOnly Int ID
	ReadOnly Int X
	ReadOnly Int Y
	Static Get Int W;Return SPR_CardSize.W; End
	Static Get Int H;Return SPR_CardSize.H; End

		
	Void Draw()
		Deg = Deg + 0.01
		SetColor(100,100,100)
		SetAlpha(math.floor(math.abs(XMath.Sin(Deg+(ID*10))*255)))
		Rect(X,Y,SPR_CardSize.W,SPR_CardSize.H)
	End
	
	Static Void DrawAll()
		For c in Each_Chain(First)
			c.Draw()
		End
		SetAlpha(255)
	End
		
	Constructor(Int _X,Int _Y)
		ID = Num;Num++
		First = First || Self
		if (Last); Last.Next = Self; End
		Last = Self
		X = _X
		Y = _Y
		CSayF("Card Node created at (%04d, %04d)",X,Y)
	End
End

Class SpideretteCard
	Static Int Cnt
	Static Int Deals
	ReadOnly Int ID
	Int Delay
	Bool Visible
	Var Card
	Int GX
	Int GY
	Int X
	Int Y
	Static Get Int W; Return SPR_CardSize.W; End
	Static Get Int H; Return SPR_CardSize.H; End
	Constructor(Node)
		Cnt++
		X=math.random(-500,Graphics.width+500)
		Y=graphics.height+100
		GX = (Node || {["X"]=0})["X"]
		GY = (Node || {["Y"]=0})["Y"]
		Delay = cnt*10
		ID=Cnt
		CSayF("%d>Card #%d has been created!",Deals,ID)
	End
	Destructor
		CSayF("%d>Card #%d has been destroyed!",Deals,ID)
	End
	
	Void Draw()
		SetColor(255,255,255,255)
		If Delay>0
			Delay--
		Else
			If X>GX; X=X-math.max( (X-GX) div 10,1); ElIf X<GX; X=X+math.max( (GX-X) div 10,1); End
			If Y>GY; Y=Y-math.max( (Y-GY) div 10,1); ElIf Y<GY; Y=Y+math.max( (GY-Y) div 10,1); End
		End
		If Visible
			SPR_Card.DrawCard(X,Y,Card.CardSuit,Card.CardValue)
		Else
			SPR_Card.DrawBack(X,Y)
		End
	End	
End

Class SpideretteAction
	ReadOnly String Action
	ReadOnly Var From
	ReadOnly Var To
	ReadOnly Var Cards
	ReadOnly Int FromNumHidden
	Constructor(String A,F,T,C)
		Action = Upper(A)
		if Action=="CLEAR"
			 // Clear is automated and does therefore not count as a move
			if SPR_Cleared && SPR_Cleared[3]
				SFX("COMPLETE")
			Else
				SFX("BONUS")
			End
			Cards = T
		Else
			SPR_Moves++
			SFX("SLIDE")
			Cards = C
		End
		From  = F
		To    = T		
	End
	Static Var _STCK 
	Static Var Clear()
		_STCK = new Stack()
	End
	Static Void Add(String A,F,T,C)
		_STCK.Push(new SpideretteAction(A,F,T,C))
	End
End
#EndRegion

Init
	// Piles
	SPR_Draw = new CardNode(5,5)	
	
	// Cleared
	SPR_Clear = {}
	SPR_Clear[0] = New CardNode( 5               ,Graphics.Height-math.floor(SPR_CardSize.H * 2.6))
	SPR_Clear[1] = New CardNode(10+SPR_CardSize.W,Graphics.Height-math.floor(SPR_CardSize.H * 2.6))
	SPR_Clear[2] = New CardNode( 5               ,Graphics.Height-math.floor(SPR_CardSize.H * 1.50))
	SPR_Clear[3] = New CardNode(10+SPR_CardSize.W,Graphics.Height-math.floor(SPR_CardSize.H * 1.50))
	SPR_RowNodes = {}
	For i=0,6
		int x
		x = Graphics.Width- ((SPR_CardSize.W*1.25)*(7-i))
		SPR_RowNodes[i] = New CardNode(x,40)
	End
End	

Void Deal()
	SpideretteCard.Deals++
	SPR_Card = SPR_CardSize.Bind()
	int dp=0
	SPR_Row = {}	
	For i2=0,6		
		For i1=i2,6
			SPR_Row[i1] = SPR_Row[i1] || {}
			CSayF("Dealing card on row %d:%d",i1,i2)
			plua crd;crd = new SpideretteCard(SPR_RowNodes[i1])
			SPR_Row[i1][i2] = crd
			crd.Card = SPR_Deck[dp]
			dp++
		End
	End
	plua DrawPile; DrawPile = New Stack()
	//SPR_DiscPile = New Stack()
	//SPR_DrawShow = {}
	//SPR_DiscShow = {}
	For i=51,dp,-1
		plua crd;crd = new SpideretteCard(SPR_Draw)
		crd.Card = SPR_deck[i]
		DrawPile.Push(crd)
	End
	SPR_DrawPile = {}
	For i,c in ipairs(DrawPile.Array)
		SPR_DrawPile[23-i]=c
	End
End

Void DrawCards()
	// Tableau
	For ri,ra in ipairs(SPR_Row)
		Lua.assert(SPR_RowNodes[ri],sprintf("No row node on index %d",ri))
		Int Hidden=0
		Int Y=SPR_RowNodes[ri].Y
		Int X=SPR_RowNodes[ri].X
		Int Hover = -1
		For ci,ca in ipairs(ra)
			ca.GY=Y
			ca.GX=X
			If ca.Visible
				Y = Y + 30				
			Else
				Y = Y + 5
				Hidden++
				If ca.GY==ca.Y && ca.GX==ca.X && ci==len(ra)-1
					ca.Visible=true
					ra.FlashTime=1000
				End
			End	
			ca.Draw()
			If ca.Visible && MX>ca.X && MY>CA.Y && MX<ca.X+CA.w && MY<CA.Y+CA.h
				Bool Allow = true
				For hi,hc in ipairs(ra)
					If HI>CI && HI<Len(ra)-1
						Allow = Allow && ra[HI+1].Card.CardSuit == ca.Card.CardSuit
						Allow = Allow && ra[HI+1].Card.CardValue == ra[HI].Card.CardValue - 1
					End
				End
				If Allow;Hover=ci;End
			End
			If Hidden>0 && ((ra.FlashTime || 0)<=0 || os.time()%2==0)
				SetColor(0,180,255)
				If (ra.FlashTime || 0)>0; SetColor(255,180,0); End
				MNI.Dark(sprintf("%d",Hidden),SPR_RowNodes[ri].X,SPR_RowNodes[ri].Y)
			ElIf (ra.FlashTime || 0)>0
				ra.FlashTime--
			End			
		End
		If Hover>=0
			plua crd;crd = ra[Hover]
			SetColorHSV(0,0,0.75+( (os.time()%2) * 0.25) )
			PPP.Stretch(crd.X-128,Crd.Y-128,128,128)
			SetColor(255,255,255,255)
			QCardWrite.Show(Graphics.Width div 2, Graphics.Height - 96,Crd.Card.CardSuit,Crd.Card.CardValue)
		End
	End
	// Pile
	Int PCnt = 0
	if !SPR_DrawPile.Quick
		SPR_DrawPile.Quick=true
		For c in Each(SPR_DrawPile)
			c.Draw()
			SPR_DrawPile.Quick = SPR_DrawPile.Quick && c.X==c.GX && c.Y==c.GY
			if SPR_DrawPile.Quick; PCnt++; End
		End
		if SPR_DrawPile.Quick; CSay("Draw Pile Now Set To Quick!"); End
	Else
		PCnt = Len(SPR_DrawPile)
		if PCnt>0;	SPR_Card.DrawBack(SPR_Draw.X,SPR_Draw.Y); End
	End
	If PCnt>1
		GLD.Text(sprintf("%d",PCNT),SPR_Draw.X+(SPR_Draw.W div 2),SPR_Draw.Y+(SPR_Draw.H div 2),2,2)
	End
	If MX>SPR_Draw.X && MY>SPR_Draw.Y && MX<SPR_Draw.X+SPR_Draw.W && MY<SPR_Draw.Y+SPR_Draw.H && Len(SPR_DrawPile)>0
		PPP.Stretch(SPR_Draw.X+(SPR_Draw.W div 2)-128,SPR_Draw.Y+(SPR_Draw.H div 2)-128,128,128)
		If ML 
			SpideretteAction.Add("Draw",nil,nil,math.min(7,Len(SPR_DrawPile)))
			For i=0,6
				If Len(SPR_DrawPile)>0					
					Int idx=Len(SPR_DrawPile)-1
					CSayF("Adding card (%d) to row #%d (%d)",idx,i+1,i)
					Append(SPR_Row[i],SPR_DrawPile[idx])
					SPR_DrawPile[idx].Delay = math.max(SPR_DrawPile[idx].Delay,i*5)
					SPR_DrawPile[idx].Visible=true
					SPR_DrawPile[idx]=nil					
				End
			End
		End
	End
End

Int OldTime
Void ShowData()
	ShowTime(SPR_Time,QUD,Graphics.Height-30,2)
	ShowMoves(SPR_Moves,SPR_Undone,QUD*3,Graphics.Height-30,2)
	if SPR_Moves>0 && SPR_State==0
		Int NewTime = os.time()
		If NewTime!=OldTime
			SPR_Time++
			OldTime = NewTime
		End
	End
End

Global Bool  GAMEFEATURES_SAVEEXIT_ALLOW(); Return False; End

Global Void GameNew(String Shuf="")
	SpideretteCard.Cnt=0
	SpideretteAction.Clear()
#if Use_SeedLog	
	plua slxn
#fi
	SPR_Config.Value("Result","Played",SPR_Config.IntValue("Result","Played")+1)
	//SPR_Score = 500
	SPR_Moves = 0
	SPR_Undone = 0
	SPR_Cleared = {}
	SPR_State=0
	SPR_Time=0
	GameFeatures.ShuffleTag="DECK_Spiderette"
#if Use_SeedLog
	CSay("SeedLog")
	slxn = sprintf("%d_Suits::allowempty.%s",Suits,AllowEmpty)
	SPR_SeedLog = SeedLog.StartLog("SPRDERETTE",slxn)
	SPR_SeedLog.Played++
	
#else
	CSay("SeedLog DISABLED!")
	SPR_SeedLog = SeedLog.StartLog("FAKE")	
#fi
	If Shuf!=""
		Lua.error("Loading shuffles not yet supported")
	Else		
		Switch Suits
		Case 1		
			SPR_Deck = Deck.Shuffle("DECK_Spiderette",ShuffleMethod,1, 13, 8,1)
		Case 2
			SPR_Deck = Deck.Shuffle("DECK_Spiderette",ShuffleMethod,1, 13, 4,2)
		Default
			SPR_Deck = Deck.Shuffle("DECK_Spiderette",ShuffleMethod,1, 13, 2,4)
		End
	End
	Deal()
End

Global Void MainFlow()
	SetColor(255,255,255,255)
	DrawBackground()
	CardNode.DrawAll()
	DrawCards()
	ShowData()
	SetColor(255,255,255,255); ICO.Stretch(Graphics.Width-ICOSIZE,Graphics.Height-ICOSIZE,ICOSIZE,ICOSIZE); ICOSIZE = math.max(ICOSIZE-1,96)
	GameFeatures.Button()
	ShowMouse()
End