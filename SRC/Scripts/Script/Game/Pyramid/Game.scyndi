// License Information:
// House Of Cards
// Pyramid
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.03.21
// End License Information

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SGJCR"
#use "Libs/SCI/Graphics"

#use "Libs/xMath"
#use "Libs/Stacker"

#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"

#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/Sound"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/SeedLog"
#use "Script/Use/Gen/GameFeatures"

ReadOnly Var Fnt  = ObtainFont("RYANNA")
ReadOnly Var ESC  = ObtainImage("SUCCESS")
ReadOnly Var EFL  = ObtainImage("FAIL")
ReadOnly Var UND  = ObtainImage("UNDO")
ReadOnly Var ICO  = LoadNewImage("Script/Game/Pyramid/Icon.png","PYRAMID_ICON")
ReadOnly Var OKE  = ObtainImage("OK")

	
	
// 0 = Playing
// 1 = Won
// 2 = Fail
Int State = 0

plua CardSize = Lua.Scyndi.Class.CardSize

plua Pyr_Config = GINIE.Obtain("CONFIG::PYRAMID")
plua Pyr_Deck
plua Pyr_Draw
plua Pyr_Discard
plua Pyr_CardSize = CardSize.FromH(200)
plua Pyr_Card
plua Pyr_Seedlog
Int  Pyr_Score
Int  Pyr_ResetPile

Int  hue = os.time()

ReadOnly Int DrPX = (Graphics.Width div 2) - (175)
ReadOnly Int DiPX = (Graphics.Width div 2) + ( 25)
ReadOnly Int PY   = 600
// Slow, but not slow enough for me. :-P
Get Int BX; Return DrPX+Pyr_CardSize.W; End
Get Int BH; Return Pyr_CardSize.H div 5; End
Get Int BY; Return PY+BH; End
Get Int BW; return DiPX-BX; End

Class PlayAct
	ReadOnly Var Card1
	ReadOnly Int Row1
	ReadOnly Int Node1
	ReadOnly Var Card2
	ReadOnly Int Row2
	ReadOnly Int Node2
	ReadOnly Int Score
	ReadOnly String ActCmd
		
	Constructor(String _Cmd,_Card1,_Card2,Int _Row1, Int _Node1,Int _Row2, Int _Node2)
		Score  = Pyr_Score
		ActCmd = _Cmd
		
		Card1  = _Card1
		Row1   = _Row1
		Node1  = _Node1
		
		Card2  = _Card2
		Row2   = _Row2
		Node2  = _Node2		
	End
	
	ReadOnly Static Var Stack = New Stack()
	Static Void Add(String _Cmd,_Card1,_Card2, Int _Row1=0, Int _Node1=0,Int _Row2=0, Int _Node2=0)
		Stack.Push(new PlayAct(_Cmd,_Card1,_Card2,_Row1,_Node1,_Row2,_Node2))
		CSayF("Stacked: %s (%3s:%3s), %d:%d",_Cmd,(_Card1 || {}).CardSuit,(_Card1 || {}).CardValue,_Row1,_Node1)
	End
End
	

Class PyrNode
	ReadOnly Int X
	ReadOnly Int Y
	ReadOnly Int Row
	ReadOnly Var Cover1
	ReadOnly Var Cover2
	Var Card
	
	Get Bool Selectable
		plua ret; ret = (Card!=nil) && (Cover1==nil || Cover1.Card==nil) && (Cover2==nil || Cover2.Card==nil)
		CSayF("Selectable card row %d (%d,%d) -> %s",Row,X,Y,ret)
		return ret;
	End
	
	Get Int W; return Pyr_CardSize.W; End
	Get Int H; return Pyr_CardSize.H; End
	
	Constructor (Int _X, Int _Y, Int _Row,_C1,_C2)
		X=_X
		Y=_Y
		Row=_Row
		Cover1=_C1
		Cover2=_C2
		CSayF("- Node added to row #%d  (%s::%s)",Row,_C1,_C2)
	End
End	

Class PyrRow
	ReadOnly Static Table Row={}
	ReadOnly Table Nodes
	ReadOnly Int Bonus
	ReadOnly Int Num
	ReadOnly Var BonusImg
	Constructor(Int N,Int B)
		Nodes = {}
		Bonus = B
		Num = N
		BonusImg = LoadImage(sprintf("Script/Game/Pyramid/Bonus_%d.png",Bonus),sprintf("PYRAMID_BONUS_%d",Bonus))
		BonusImg.HotCenter()
		CSayF("Row %d, Bonus %02d",N,B)
	End
End

Class Bonus
	ReadOnly Static Table Lijst = {}
	ReadOnly Var Img	
	ReadOnly Int X = Graphics.Width div 2
	Int Y = Graphics.Height div 2
	Int A = 300
	Constructor(I)
		Img = I
		For _,k in Pairs(Lijst)
			y = math.max(y,k.y+75)
		End
	End
	Static Void Go(I)
		int IDX
		While Lijst[IDX]
			IDX++
		End
		Lijst[IDX]=New Bonus(I)
	End
	Void Show()
		SetAlpha(math.min(255,A))
		Img.Draw(X,Y)
		Y--
		A--
	End
	Static Void ShowAll()
		plua kill = {}
		For i,k in Pairs(Lijst)
			k.Show()
			if k.A<0; kill[len(kill)]=i; end
		End
		For victim in Each(kill)
			Lijst[victim]=nil
		End
	End
End
		
Class SelectedCard
	ReadOnly Int Row
	ReadOnly Int Node
	Bool Removed 
	Get Int X
		Switch Row*-1
			Case 1; Return DrPX;
			Case 2; Return DiPX;
			Default; Return PyrRow.Row[Row].Nodes[Node].X
		End
	End
	Get Int Y
		If Row<0; Return PY; End
		Return PyrRow.Row[Row].Nodes[Node].Y
	End
	Get Int W; Return Pyr_CardSize.W; End
	Get Int H; Return Pyr_CardSize.H; End
	
	Get Var Card
		Switch Row*-1
			Case 1; Return Pyr_Draw.Value
			Case 2; Return Pyr_Discard.value
			Default; Return PyrRow.Row[Row].Nodes[Node].Card
		End
	End
	
	Void BonusCheckRow()
		plua Leeg=True
		For N in Each(PyrRow.Row[Row].Nodes)
			Leeg = Leeg && N.Card == nil
		End
		If Leeg
			Bonus.Go(PyrRow.Row[Row].BonusImg)
			If Row==0
				Bonus.Go(ESC)
				SFX("COMPLETE")
				if Pyr_SeedLog; Pyr_SeedLog.Won++; End
				State = 1
			Else 
				SFX("BONUS")
			End
			Pyr_Score = Pyr_Score + PyrRow.Row[Row].Bonus			
		End
	End
	
	Void Mark()
		If Removed; Return; End
		SetColorHSV(Hue,1,1)
		Rect(X-1,Y-1,W+2,H+2,1)
		SetAlpha(75)
		Rect(X,Y,W,H)
		SetAlpha(255)
	End
	Void Remove()
		CSayF("Removing card %d:%d",Row,Node)		
		Switch Row*-1
			Case 1; Pyr_Draw.Pop(); CSay("Removal from draw stack")
			Case 2; Pyr_Discard.Pop(); CSay("Removal from discard stack")
			Default; PyrRow.Row[Row].Nodes[Node].Card = nil; self.BonusCheckRow(); CSayF("Removal from row #%d, node #%d",Row,Node)
		End
		Removed = true
	End
	Constructor(Int _R, Int _N)
		Row  = _R
		Node = _N
		Removed = False
		CSayF("Selected record for %d:%d",_R,_N)
	End
	Destructor
		//CSayF("Selection record for %d:%d destroyed",Row,Node)
	End
End

Var Selected

Void SelectCard(Int Row,Int Node)
	If Selected && Selected.removed; Selected = nil; End
	plua S2;S2 = new SelectedCard(Row,Node)
	If S2.Card.CardValue==13
		SFX("SLIDE")
		PlayAct.Add("KillKing",S2.Card,nil,Row,Node)
		S2.Remove()
		Selected = nil
		Pyr_Score = Pyr_Score + 5
		Return
	End
	Selected = Selected || s2
	CSayF("Compare %d + %d = %d ",s2.Card.CardValue,Selected.Card.Cardvalue,s2.Card.CardValue+Selected.Card.Cardvalue)
	If s2.Card.CardValue+Selected.Card.Cardvalue==13
		SFX("SLIDE")
		CSayF("Nodes: %d:%d    %d:%d",Selected.Row,Selected.Node,s2.Row,s2.Node)
		PlayAct.Add("Kill",Selected.Card,S2.Card,Selected.Row,Selected.Node,s2.Row,s2.Node)
		s2.Remove()
		Selected.Remove()
		Selected = nil
		Pyr_Score = Pyr_Score + 5
	ElIf s2.Card.CardValue!=Selected.Card.Cardvalue || s2.Card.CardSuit!=Selected.Card.CardSuit 
		Selected=s2
	End
End	

Class StackButton
	Static ReadOnly Table Lst = {}
	ReadOnly Delegate Condition
	ReadOnly Delegate Action
	ReadOnly Var Icon
	Constructor(String _I,_C,_A)
		Icon = ObtainImage(_I)
		Condition = _C
		Action = _A
		CSayF("Stack Button '%s' created",_I)
	End
End

Bool Draw_Condition()
	Return PYR_Draw.Value!=nil
End

Void Draw_Action()
	CSayF("Moving a card from draw to discard")
	plua f;f = Pyr_Draw.Value
	PlayAct.Add("ToDiscard",f)
	Pyr_Draw.Pop()
	PYR_Discard.Push(f)	
	SFX("SLIDE")
	Selected = nil
End

Bool Disc_Condition()
	Fnt.Text(Lua.tostring(3-Pyr_ResetPile),BX+(BW div 2),BY+BH,2)
	Return PYR_Draw.Value==nil && Pyr_Discard.Value!=nil && Pyr_ResetPile<3
End

Void Disc_Action()
	CSay("We need a great reset") // :-P
	PlayAct.Add("Reset")
	Pyr_ResetPile++
	While PYR_Discard.Value
		plua f;f = Pyr_Discard.Value
		Pyr_Draw.push(f)
		PYR_Discard.Pop()
		Sys.Delay(10)
		SFX("SLIDE")
	End
	Selected = nil
End
		
	

Init
	PyrRow.Row[7] = { ["Nodes"] = {} }
	For i=6,0,-1
		Int B=(7-i)*25
		Switch i
			case 0; B=500
			case 1; B=250
			case 2; B=150
		End
		plua wrow;wrow = New PyrRow(i,B) // wrow = Work Row
		PyrRow.Row[i]  = wrow
		For j=0,i
			Int jx;jx = (((Graphics.Width div 2) - (75*i)) + (j*150)) - (Pyr_CardSize.W Div 2)
			int jy;jy = (i*50)+25
			wrow.nodes[j] = new PyrNode(jx,jy,i,PyrRow.Row[i+1].Nodes[j],PyrRow.Row[i+1].Nodes[j+1])
		End
	End
	CSayF("Card Size: %dx%d",Pyr_CardSize.W,Pyr_CardSize.H)
	StackButton.Lst[0] = new StackButton("Arrow_Right",Draw_Condition,Draw_Action)
	StackButton.Lst[1] = new StackButton("Arrow_Left",Disc_Condition,Disc_Action)
End

Global Bool GameFeatures_SaveExit_Allow()
	Return State == 0
End

Global Void GameFeatures_SaveExit_Action()
	CSay("Preparing savegame")
	plua SG = SGJCR.Create("SAVE:PYRAMID")
	SG.Assign("House Of Cards.SaveGame.PYRAMID.jcr")
	SG.Clear()	
	CSay("= Shuffle") SG.Text["Shuffle.ini"] = Deck.ShuffleOut(GameFeatures.ShuffleTag)
	CSay("= General") SG.Text["General.ini"] = sprintf("[Check]\nEngine=Scyndi's Creative Interpreter\nProject=House Of Cards\nGame=Pyramid\n\n[Data]Score=%d\n",Pyr_Score)
	CSay("= Actions") SG.Text["Actions.ini"] = "[Gen]\nCount=0\n" // TODO: Actions for undo
	String NOut = "[Gen]\nNodeFile=Pyramid\n\n"
	CSay("= Nodes")
	For ri=0,6
		For ni=0,ri
			NOut = NOut .. sprintf("[Node %d::%d]\n",ri,ni)
			plua C;C= PyrRow.Row[ri].Nodes[ni].Card
			If C
				NOut = NOut .. sprintf("Card=Yes\nSuit=%d\nValue=%d\n\n",C.CardSuit,C.CardValue)
			Else
				NOut = Nout .. "Card=No\n"
			End
		End
	End
	CSay("= Stacks")
	For ktag,kstack in pairs { ["Draw"]=Pyr_Draw,["Discard"]=Pyr_Discard }
		plua ar = kstack.Array
		NOut = NOut .. sprintf("[%s]\nCount=%d\n",ktag,Len(ar))
		For i,c in ipairs(ar)
			NOut=Nout..sprintf("STACK%02dS=%d\nSTACK%02dV=%d\n",i,C.CardSuit,i,C.CardValue)
		End
		NOut=Nout .. "\n"
	End
	NOut=NOut..sprintf("\n\n[Gen]\nScore=%d\nRest=%d\n\n",Pyr_Score,Pyr_ResetPile)
	SG.Text["Nodes.ini"] = NOut
	CSay("= Saving")
	SG.Save()
	CSay("= Done")
	CSay("= Leaving")
	Sys.CurrentFlow="SELECTGAME"
End

Global Void GameContinue()
	GameFeatures.ShuffleTag="DECK_Pyramid"
	CSay("Loading savegame")
	plua SG = SGJCR.Create("LOAD:PYRAMID")
	SG.Assign("House Of Cards.SaveGame.PYRAMID.jcr")
	SG.Load()
	CSay("= Shuffle")
	Pyr_Card = Pyr_CardSize.Bind()
	State = 0
	Pyr_Deck = Deck.ShuffleIn("DECK_PYRAMID",SG.Text["Shuffle.ini"])
	plua nodesdata;nodesdata = GINIE.Parse(SG.Text["Nodes.ini"],"NODES_TO_LOAD_FOR_PYARAMID")
	//printf("-- NODES.INI --\n%s\n-- END NODES.INI --\n",SG.Text["Nodes.ini"])
	CSay("= Nodes")
	For ri=0,6
		For ni=0,ri
			plua cnode;cnode = PyrRow.Row[ri].Nodes[ni]
			string ntag;ntag = sprintf("Node %d::%d",ri,ni)
			//CSayF("  = Node %d:%d -> Has Card: ",ri,ni,nodesdata.value(ntag,"Card"))
			If Upper(nodesdata.value(ntag,"Card"))=="YES"
				cnode.card = new DeckCard(nodesdata.intvalue(ntag,"suit"),nodesdata.intvalue(ntag,"value"))
				CSayF("  = Node %d:%d -> %s",ri,ni,card)
			Else
				cnode.card=nil
			End
		End
	End
	CSay("= Stacks")
	Pyr_Draw = New Stack()
	Pyr_Discard = New Stack()
	For ktag,kstack in pairs { ["Draw"]=Pyr_Draw,["Discard"]=Pyr_Discard }		
		int sl;sl = nodesdata.intvalue(ktag,"Count")
		kstack.clear()
		For i=sl-1,0,-1
			kstack.push(New DeckCard(nodesdata.intvalue(ktag,sprintf("STACK%02dS",i)),nodesdata.intvalue(ktag,sprintf("STACK%02dV",i))))
		End
	End
	Pyr_Score     = nodesdata.intvalue("gen","score")
	Pyr_ResetPile = nodesdata.intvalue("gen","reset")
	// TODO: Actions for Undo
	CSay("= Complete")
End

Global Void GameNew(String CShuffle="")
	Pyr_Score = 0
	GameFeatures.ShuffleTag="DECK_Pyramid"
	If CShuffle!=""
		Lua.error("Loading shuffles not yet supported")
	Else
		plua shuf=Pyr_Config.Value("Shuffle","Shuffle")
		if Upper(shuf)=="RANDOM"
			Pyr_SeedLog=SeedLog.StartLog("Pyramid")
			Pyr_seedLog.Played++
		End
		Pyr_Deck = Deck.Shuffle("DECK_PYRAMID",Pyr_Config.Value("Shuffle","Shuffle"))
	End
	Int DIdx = 0
	For RI,RR in iPairs(PyrRow.Row)
		For NI,NN in iPairs(RR.Nodes)
			NN.Card = Pyr_Deck[DIdx]
			DIdx++
		End
	End
	Pyr_Draw    = New Stack()
	Pyr_Discard = New Stack()
	For i=Pyr_Deck.Size-1,DIdx,-1
		Pyr_Draw.Push(Pyr_Deck[i])
	End
	Pyr_Card = Pyr_CardSize.Bind()
	State = 0
	Pyr_ResetPile = 0
End

Void UndoError(string Msg)
	Sys.Annoy(sprintf("UNDO ERROR\n\n%s\n\nThis is likely due to a bug in the Pyramid script\n\nYou may go on, but expect odd behavior.\n\nFor safety reasons the action stack has been emptied!\n\nPlease report this on my issue tracker (if it wasn't reported before)",Msg))
	PlayAct.Stack.Clear()
End

Void UndoButton()
	If State==1; Return; End
	If !PlayAct.Stack.Value; Return; End
	SetColor(255,255,255)
	If MX<64 && MY>Graphics.Height-64
		SetColorHSV(Hue,1,1)
		If ML
			Plua _UA = PlayAct.Stack.Pop()
			Pyr_Score = _UA.Score
			Switch _UA.ActCmd
				Case "ToDiscard"
					Pyr_Draw.Push(Pyr_Discard.Pop())
				Case "Reset" 
					While Pyr_Draw.Value
						plua fuck;fuck = Pyr_Draw.Pop()
						Pyr_Discard.Push(fuck)
					End
				Case "Kill" 
					For i=1,2
						//plua Crd;Crd=new DeckCard(_UA[sprintf("Suit%d",i)],_UA[sprintf("Value%d",i)])
						plua Crd;Crd=_UA[sprintf("Card%d",i)]
						Switch _UA[sprintf("Row%d",i)]*-1
							Case 1 
								Pyr_Draw.Push(Crd)
							Case 2
								Pyr_Discard.Push(Crd)
							Default
								int R;R=_UA[sprintf("Row%d",i)]
								Int N;N=_UA[sprintf("Node%d",i)]
								Plua Node;Node=PyrRow.Row[R].Nodes[N]
								If (Node.Card)
									UndoError(sprintf("Undo responds to non-empty node %d:%d",R,N))
									Return
								End
								Node.Card=Crd
						End
					End
				Case "KillKing" 
					plua Crd;Crd=_UA.Card1
					Switch _UA.Row1*-1
						Case 1 
							Pyr_Draw.Push(Crd)
						Case 2
							Pyr_Discard.Push(Crd)
						Default
							int R;R=_UA.Row1
							Int N;N=_UA.Node1
							Plua Node;Node=PyrRow.Row[R].Nodes[N]
							If (Node.Card)
								UndoError(sprintf("Undo responds to non-empty node %d:%d",R,N))
								Return
							End
							Node.Card=Crd
					End
				Case "FuckYou"
					Lua.error("Yes! Yes! Fuck you too! But I ain't coming to America")
					// A case had to exist
				Default
					UndoError(sprintf("Unknown action command '%s'",_UA.ActCmd))
					Return
			End
			CSay("Undo not yet operational")
		End
	End
	UND.Stretch(0,Graphics.Height-64,64,64)
End

Void OkayButton()
	If State!=1; Return; End
	Int X = (Graphics.Width div 2) - 32
	Int Y = Graphics.Height - 64
	SetColor(255,255,255)
	If MY>Y && MX>X && MX<X+64
		SetColorHSV(Hue,1,1)
		If ML
			Sys.CurrentFlow="SELECTGAME" 
		End
	End
	Oke.Stretch(X,Y,64,64)
	SetColor(255,255,255,255)
End

Global Void MainFlow()
	hue = (hue+1)%360
	SetColor(255,255,255,255)
	DrawBackground()
	For RI,RR in iPairs(PyrRow.Row)
		For NI,NN in iPairs(RR.Nodes)
			If NN.Card
				Pyr_Card.DrawCard(NN.X,NN.Y,NN.Card.CardSuit,NN.Card.CardValue)
				If MX>NN.X && MX<NN.X+NN.W && MY>NN.Y && MY<NN.Y+NN.H && ML && NN.Selectable
					SelectCard(RI,NI)
				End
			End
		End
	End
	SetColor(100,100,100,100)
	Rect(DrPX,PY,Pyr_CardSize.W,Pyr_CardSize.H)
	Rect(DiPX,PY,Pyr_CardSize.W,Pyr_CardSize.H)
	If Pyr_Draw.Value
		SetColor(255,255,255,255)
		Pyr_Card.DrawCard(DrPX,PY,Pyr_Draw.Value.CardSuit,Pyr_Draw.Value.CardValue)
		If MX>DrPX && MY>PY && MX<DrPX+Pyr_CardSize.W && MY<PY+Pyr_CardSize.H && ML
			SelectCard(-1,0)
		End
	End
	if Pyr_Discard.Value
		SetColor(255,255,255,255)
		Pyr_Card.DrawCard(DiPX,PY,Pyr_Discard.Value.CardSuit,Pyr_Discard.Value.CardValue)
		If MX>DiPX && MY>PY && MX<DiPX+Pyr_CardSize.W && MY<PY+Pyr_CardSize.H && ML
			SelectCard(-2,0)
		End
	End
	For But in Each(StackButton.Lst)
		If But.Condition()
			If MX>BX && MY>BY && MX<BX+BW && MY<BY+BH
				SetColorHSV(Hue,1,1)
				If ML; But.Action(); End
			End
			But.Icon.Stretch(BX,BY,BW,BH)
			break
		End
	End
	If Selected; Selected.Mark(); End
	SetColor(255,255,255)
	SetAlpha(255)
	ShowScore(Pyr_Score,5,5)
	Bonus.ShowAll()
	GameFeatures.Button()
	UndoButton()
	OkayButton()
	SetColor(255,255,255); Ico.Stretch(Graphics.Width-65,Graphics.height-65,64,64)
	if Pyr_SeedLog; Pyr_SeedLog.ShowSeed(5,35); End
	ShowMouse()
End