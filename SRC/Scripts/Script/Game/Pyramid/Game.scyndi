// License Information:
// House Of Cards
// Pyramid
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.03.08
// End License Information

Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/Graphics"

#use "Libs/xMath"
#use "Libs/Stacker"

#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"

#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"

ReadOnly Var Fnt  = ObtainFont("RYANNA")
ReadOnly Var ESC  = ObtainImage("SUCCESS")
ReadOnly Var EFL  = ObtainImage("FAIL")
	
	
// 0 = Playing
// 1 = Won
// 2 = Fail
Int State = 0

plua CardSize = Lua.Scyndi.Class.CardSize

plua Pyr_Config = GINIE.Obtain("CONFIG::PYRAMID")
plua Pyr_Deck
plua Pyr_Draw
plua Pyr_Discard
plua Pyr_CardSize = CardSize.FromH(200)
plua Pyr_Card
Int  Pyr_Score
Int  Pyr_ResetPile

Int  hue = os.time()

ReadOnly Var DrPX = (Graphics.Width div 2) - (125)
ReadOnly Var DiPX = (Graphics.Width div 2) + ( 25)
ReadOnly Var PY   = 600

Class PyrNode
	ReadOnly Int X
	ReadOnly Int Y
	ReadOnly Int Row
	ReadOnly Var Cover1
	ReadOnly Var Cover2
	Var Card
	
	Get Bool Selectable
		plua ret; ret = (Card!=nil) && (Cover1==nil || Cover1.Card==nil) && (Cover2==nil || Cover2.Card==nil)
		CSayF("Selectable card row %d (%d,%d) -> %s",Row,X,Y,ret)
		return ret;
	End
	
	Get Int W; return Pyr_CardSize.W; End
	Get Int H; return Pyr_CardSize.H; End
	
	Constructor (Int _X, Int _Y, Int _Row,_C1,_C2)
		X=_X
		Y=_Y
		Row=_Row
		Cover1=_C1
		Cover2=_C2
		CSayF("- Node added to row #%d  (%s::%s)",Row,_C1,_C2)
	End
End	

Class PyrRow
	ReadOnly Static Table Row={}
	ReadOnly Table Nodes
	ReadOnly Int Bonus
	ReadOnly Int Num
	Constructor(Int N,Int B)
		Nodes = {}
		Bonus = B
		Num = N
		CSayF("Row %d, Bonus %02d",N,B)
	End
End

Class SelectedCard
	ReadOnly Int Row
	ReadOnly Int Node
	Bool Removed 
	Get Int X
		Switch Row*-1
			Case 1; Return DrPX;
			Case 2; Return DiPX;
			Default; Return PyrRow.Row[Row].Nodes[Node].X
		End
	End
	Get Int Y
		If Row<0; Return PY; End
		Return PyrRow.Row[Row].Nodes[Node].Y
	End
	Get Int W; Return Pyr_CardSize.W; End
	Get Int H; Return Pyr_CardSize.H; End
	
	Get Var Card
		Switch Row*-1
			Case 1; Return Pyr_Draw.Value
			Case 2; Return Pyr_Discard.value
			Default; Return PyrRow.Row[Row].Nodes[Node].Card
		End
	End
	
	Void BonusCheckRow()
		// TODO: Bonus for clearing row
	End
	Void Mark()
		If Removed; Return; End
		SetColorHSV(Hue,1,1)
		Rect(X-1,Y-1,W+2,H+2,1)
		SetAlpha(75)
		Rect(X,Y,W,H)
		SetAlpha(255)
	End
	Void Remove()
		CSayF("Removing card %d:%d",Row,Node)
		Switch Row*-1
			Case 1; Pyr_Draw.Pop()
			Case 2; Pyr_Discard.Pop()
			Default; PyrRow.Row[Row].Nodes[Node].Card = nil; self.BonusCheckRow()
		End
		Removed = true
	End
	Constructor(Int _R, Int _N)
		Row  = _R
		Node = _N
		Removed = False
		CSayF("Selected record for %d:%d",_R,_N)
	End
	Destructor
		//CSayF("Selection record for %d:%d destroyed",Row,Node)
	End
End

Var Selected

Void SelectCard(Int Row,Int Node)
	If Selected && Selected.removed; Selected = nil; End
	plua S2;S2 = new SelectedCard(Row,Node)
	If S2.Card.CardValue==13
		S2.Remove()
		Selected = nil
		Pyr_Score = Pyr_Score + 5
		Return
	End
	Selected = Selected || s2
	CSayF("Compare %d + %d = %d ",s2.Card.CardValue,Selected.Card.Cardvalue,s2.Card.CardValue+Selected.Card.Cardvalue)
	If s2.Card.CardValue+Selected.Card.Cardvalue==13
		s2.Remove()
		Selected.Remove()
		Selected = nil
		Pyr_Score = Pyr_Score + 5
	ElIf s2.Card.CardValue!=Selected.Card.Cardvalue
		Selected=s2
	End
End	

Init
	PyrRow.Row[7] = { ["Nodes"] = {} }
	For i=6,0,-1
		Int B=(7-i)*25
		Switch i
			case 0; B=500
			case 1; B=250
			case 2; B=150
		End
		plua wrow;wrow = New PyrRow(i,B) // wrow = Work Row
		PyrRow.Row[i]  = wrow
		For j=0,i
			Int jx;jx = (((Graphics.Width div 2) - (75*i)) + (j*150)) - (Pyr_CardSize.W Div 2)
			int jy;jy = (i*50)+25
			wrow.nodes[j] = new PyrNode(jx,jy,i,PyrRow.Row[i+1].Nodes[j],PyrRow.Row[i+1].Nodes[j+1])
		End
	End	
End

Global Void GameNew(String CShuffle="")
	Pyr_Score = 0
	If CShuffle!=""
		Lua.error("Loading shuffles not yet supported")
	Else
		Pyr_Deck = Deck.Shuffle("DECK_PYRAMID",Pyr_Config.Value("Shuffle","Shuffle"))
	End
	Int DIdx = 0
	For RI,RR in iPairs(PyrRow.Row)
		For NI,NN in iPairs(RR.Nodes)
			NN.Card = Pyr_Deck[DIdx]
			DIdx++
		End
	End
	Pyr_Draw    = New Stack()
	Pyr_Discard = New Stack()
	For i=Pyr_Deck.Size-1,DIdx,-1
		Pyr_Draw.Push(Pyr_Deck[i])
	End
	Pyr_Card = Pyr_CardSize.Bind()
	State = 0
	Pyr_ResetPile = 0
End

Global Void MainFlow()
	hue = (hue+1)%360
	SetColor(255,255,255,255)
	DrawBackground()
	For RI,RR in iPairs(PyrRow.Row)
		For NI,NN in iPairs(RR.Nodes)
			If NN.Card
				Pyr_Card.DrawCard(NN.X,NN.Y,NN.Card.CardSuit,NN.Card.CardValue)
				If MX>NN.X && MX<NN.X+NN.W && MY>NN.Y && MY<NN.Y+NN.H && ML && NN.Selectable
					SelectCard(RI,NI)
				End
			End
		End
	End
	If Pyr_Draw
		Pyr_Card.DrawCard(DrPX,PY,Pyr_Draw.Value.CardSuit,Pyr_Draw.Value.CardValue)
		If MX>DrPX && MY>PY && MX<DrPX+Pyr_CardSize.W && MY<PY+Pyr_CardSize.H && ML
			SelectCard(-1,0)
		End
	End
	If Selected; Selected.Mark(); End
	SetColor(255,255,255)
	ShowScore(Pyr_Score,5,5)
	ShowMouse()
End