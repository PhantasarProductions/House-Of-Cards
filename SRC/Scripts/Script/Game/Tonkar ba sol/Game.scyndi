// License Information:
// House of Cards
// Tonkar Ba Sol (Code is GPL3 - Concept is CC-BY-NC-SA)
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.04.05
// End License Information
Script


#region Use

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/SGJCR"
#use "Libs/SCI/Events"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

#use "Libs/xMath"
#use "Libs/Stacker"
#use "Libs/Rosetta"

#use "Script/Use/Lnk/Deck"
#use "Script/Use/Lnk/Card"
#use "Script/use/Gen/SeedLog"

#use "Script/Use/Gen/Ach"
#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/Sound"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/QCardWrite"
#use "Script/Use/Gen/GameFeatures"

#use "Script/Game/Tonkar ba Sol/Pymtheg"

#endregion

#Region "Core Assets"
ReadOnly String ICN = "SCRIPT/GAME/TONKAR BA SOL/ICON.PNG"
plua ICO // Icon
plua MAS // Mascot
ReadOnly Var FNT = ObtainFont("RYANNA")
ReadOnly Var MNI = ObtainFont("MINI")
ReadOnly Var PPP = LoadNewImage("Script/Game/Tonkar ba sol/Arrow.png","Fantasy_Arrow")
ReadOnly Var ESC  = ObtainImage("SUCCESS")
//ReadOnly Var EFL  = ObtainImage("FAIL")
ReadOnly Var OKE = ObtainImage("OK")
ReadOnly Var UND = ObtainImage("UNDO")

Int  MSW
Int  MSH
Int  Hue

Init
	CSay("Checking Phantasar Only Stuff")
	if JCR6.EntryExists(ICN)
		string m = os.date("%m")
		if M=="12"
			CSay("Let's load the Chrstmas stuff")
			ICO = LoadNewImage("SCRIPT/GAME/TONKAR BA SOL/ICON_XMas.PNG","TBS_ICON")
			MAS = LoadNewImage("SCRIPT/GAME/TONKAR BA SOL/Marrilona_Xmas.PNG","TBS_MASCOT")
		Else
			CSay("Let's load the mascot and the icon")
			ICO = LoadNewImage("SCRIPT/GAME/TONKAR BA SOL/ICON.PNG","TBS_ICON")
			MAS = LoadNewImage("SCRIPT/GAME/TONKAR BA SOL/Marrilona.PNG","TBS_MASCOT")
			CSayF("Success? Icon:%s; Mascotte:%s",ICO,MAS)
		End
		MSH = Graphics.Height
		MSW = math.floor( (Graphics.Height/Mas.Height)*Mas.Width)
		CSayF("Mascot show size: %dx%d",MSW,MSH)
	Else
		CSayF("Apparently there's no entry named '%s' in the JC6 resource, so let's not load that!")
	End		
End
#EndRegion

#Region Vars

ReadOnly Var TBS_BackGround = LoadNewImage("GFX/Backgrounds/Stretch/Forest Path.jpg","Dorst_Forest_Path")
ReadOnly Var TBS_Config = GINIE.Obtain("CONFIG::TONKAR BA SOL")

//plua TBS_CardSize = Lua.Scyndi.Class.CardSize.FromW(Graphics.Width div 11)
plua TBS_Deck
plua TBS_Row
plua TBS_Stack
plua TBS_DragCards
bool TBS_DidStack
Int TBS_State
Int TBS_Moves
Int TBS_Undone
Int TBS_Time
//Int TBS_StackCount
Int TBS_StackX
Get Int TBS_StackY;return (Graphics.H - 70) - Lua.Scyndi.Class.TBS_Card.Pym.H; End
Get Int TBS_StackW;return Lua.Scyndi.Class.TBS_Card.Pym.W; End
Get Int TBS_StackH;return Lua.Scyndi.Class.TBS_Card.Pym.H; End
Get Int TBS_StackLimit;Return TBS_Config.IntValue("Config","StackLimit"); End
Set Int TBS_StackLimit;
	If Value<=0
		TBS_Config.Value("Config","StackLimit","|in")
	Else
		TBS_Config.Value("Config","StackLimit",Value)
	End
End
Get Bool TBS_FriendlyStack;Return Upper(TBS_Config.Value("Config","FriendlyStack"))!="NO"; End
Set Bool TBS_FriendlyStack
	If Value
		TBS_Config.Value("Config","FriendlyStack","Yes")
	Else
		TBS_Config.Value("Config","FriendlyStack","No")
	End
End
	
#EndRegion

Class Action
	ReadOnly Static Table List = new Stack()
	ReadOnly String Act
	ReadOnly Var Cards
	ReadOnly Var FromR
	ReadOnly Var ToR
	ReadOnly Var Hidden
	Constructor (string A,C,F,T)
		Act    = Upper(A)
		Cards  = C
		FromR  = F
		ToR    = T
		Hidden = 0
		If Act=="MOVE"
			For i,v in pairs(FromR || {})
				if !v.visible; Hidden++; End
			End
		End
	End
	Static Var Add(string A,C,F,T)
		plua ret;ret = new Action(A,C,F,T)
		List.Push(ret)
		if ret.Act!="AUTOUNSTACK"; TBS_Moves++; End
		SFX("SLIDE")
	End
End

Class TBS_Card
	Static Var Pym = Lua.Scyndi.Class.PymDeck.FromW(Graphics.Width div 12)
	Int GX
	Int GY
	Int X
	Int Y
	Bool Visible = False
	ReadOnly Var Card
	Get Int Elem; Return Card.CardSuit; End
	Get Int Val; Return Card.CardValue; End
	Get Int W; Return Pym.W; End
	Get Int H; Return Pym.H; End
	
	Static Int WaitInc
	Int Wait
	Constructor(_Card)
		Card = _Card
		WaitInc++
		Wait=WaitInc*3
		Y = math.ceil(Graphics.Height*1.25)
		X = math.random(-200,Graphics.Width+200)
	End
	
	Void Draw()
		if Wait>0;Wait--; Return; End
		if GX<X; X=X-math.max(1,math.abs(X-GX) div 10); ElIf GX>X; X=X+math.max(1,math.abs(X-GX) div 10); End 
		if GY<Y; Y=Y-math.max(1,math.abs(Y-GY) div 10); ElIf GY>Y; Y=Y+math.max(1,math.abs(Y-GY) div 10); End 
		If Visible
			Pym.DrawCard(X,Y,Elem,Val)
		Else
			Pym.DrawBack(X,Y)
		End
	End
End	

Get Bool Dragging
	If !TBS_DragCards; Return False; End
	If MDL
		For ci,cc in ipairs(TBS_DragCards)
			cc.GX = MX - (cc.W div 2)
			cc.GY = MY + (ci * 40)
			cc.X  = cc.GX
			cc.Y  = cc.GY
		End
		Return True
	End
	For ri,ra in ipairs(TBS_Row)
		int ChkX;ChkX=math.floor(ri*(TBS_Card.Pym.W*1.123))+25
		If MX>TBS_StackX && MY>TBS_StackY && MX<TBS_StackX+TBS_StackW && MY<TBS_StackY+TBS_StackW 
			// This prevents this statement to affect the "Elif" line.
			If Len(TBS_DragCards)==1 && (TBS_StackLimit<=0 || Len(TBS_Stack)<TBS_StackLimit) && TBS_DragCards.From!=TBS_Stack
				AppendArray(TBS_Stack,TBS_DragCards)
				TBS_DragCards.From[len(TBS_DragCards.From)-1]=nil
				Action.Add("Move",TBS_DragCards,TBS_DragCards.From,TBS_Stack)
				Break
			End
		ElIf MX>ChkX && MX<ChkX+TBS_Card.Pym.W && ri!=TBS_DragCards.FromNum
			if len(ra)==0 || ra[len(ra)-1].Val==TBS_DragCards[0].Val+1
			//if True
				int l = len(TBS_DragCards.From) 
				For i=1,len(TBS_DragCards)
					CSayF("Removing card #%d from row %d",l-i,TBS_DragCards.FromNum)
					TBS_DragCards.From[l-i]=nil
				End
				CSayF("Appending cards to row #%d",ri)
				AppendArray(ra,TBS_DragCards)
				Action.Add("Move",TBS_DragCards,TBS_DragCards.From,ra)
			End
		End
	End
	TBS_DragCards = nil
	Return False
End

Void Deal()
	TBS_Card.WaitInc=0
	TBS_Row = {}
	for i=0,9; TBS_Row[i] = {}; End
	for i=0,59
		 plua cr;cr = TBS_Row[i%10]
		 cr[len(cr)] = New TBS_Card(TBS_Deck[i])
	End
End

Void DrawCards()
	Bool _Dragging = Dragging
	Bool Victory;Victory=TBS_State==0 && Len(TBS_Stack)==0 && !_Dragging
	TBS_StackX=20
	For ri,ra in ipairs(TBS_ROW)
		Int CY = 60
		Int Hover=-1
		If len(ra)==0 && (!TBS_FriendlyStack) && Len(TBS_Stack)!=0
			plua cc = TBS_Stack[len(TBS_Stack)-1]
			TBS_Stack[len(TBS_Stack)-1] = nil
			ra[0]=cc
			Action.Add("AutoUnstack",TBS_Stack,ra)
		End
		For ci,cc in ipairs(ra)
			Victory = Victory && cc.Visible
			if ci==0
				Victory = Victory && cc.Val==15
			Else
				Victory = Victory && cc.Val==ra[ci-1].Val-1 && cc.Elem==ra[ci-1].Elem
			End
			If !_Dragging
				cc.GX = math.floor(ri*(cc.W*1.123))+25
				cc.GY = CY
			End
			If cc.Visible
				CY = CY + 36
			Else
				CY = CY + 5
			End
			cc.Visible = cc.Visible || ci==len(ra)-1			
			cc.Draw()
			If cc.Visible && (!Dragging) && MX>cc.x && MY>cc.y && MX<cc.x+cc.w && MY<cc.y+cc.h && TBS_State==0
				Hover=ci
			End
			if CY+cc.H+10>TBS_StackY && ((cc.GX>=5+TBS_StackX && cc.GX<=5+TBS_StackX+cc.W) || (cc.GX+cc.W>=5+TBS_StackX && cc.GX+cc.W<=5+TBS_StackX+cc.W))
				TBS_StackX=cc.GX+cc.W+10
			End
		End
		If Hover>=0
			plua cc;cc=ra[Hover]
			SetColor(255,255,255)
			PPP.Stretch(cc.x-96,cc.y-96,96,96)
			Pymtheg.QWCard(cc.elem,cc.val,Graphics.Width div 2,Graphics.Height-96)
			If MDL
				TBS_DragCards = { ["From"]=ra,["FromNum"]=ri }
				For ci,cc in ipairs(ra)				
					if ci>=Hover; TBS_DragCards[Len(TBS_DragCards)]=cc; End
				End
			End
		End
	End
	SetColor(255,180,0)
	Fnt.Dark(sprintf("%d",Len(TBS_Stack)),TBS_StackX+TBS_StackW+5+(len(TBS_Stack)*2),TBS_StackY+(TBS_StackH div 2),0,2)
	If Len(TBS_Stack)>15; Ach.Award("TONKAR_STACKOVERFLOW"); End
	SetColorHSV(Hue,1,0.25)	 
	Rect(TBS_StackX,TBS_StackY,TBS_StackW,TBS_StackH)
	For ci,cc in ipairs(TBS_Stack)
		TBS_DidStack=True
		cc.Visible=true
		if !_Dragging
			cc.GX = TBS_StackX+(ci*2)
			cc.GY = TBS_StackY+(ci*2)
		End
		cc.Draw()
	End	
	If MX>TBS_StackX && MY>TBS_StackY && MX<TBS_StackX+TBS_StackW && MY<TBS_StackY+TBS_StackH && !_Dragging
		plua cc;cc=TBS_Stack[len(TBS_Stack)-1]
		if cc
			SetColor(255,255,255)
			Pymtheg.QWCard(cc.elem,cc.val,Graphics.Width div 2,Graphics.Height-96)
			PPP.Stretch((cc.x+(cc.w div 2))-96,(cc.y+(cc.h div 2))-96,96,96)
			if ML
				TBS_DragCards = {[0]=cc,["From"]=TBS_Stack,["FromNum"]=65535}
			end
		End
	end
	If Victory
		SFX("Complete")
		TBS_State=1
		Ach.Award("TONKAR_COMPLETE")
		if TBS_FriendlyStack;Ach.Award("TONKAR_FRIENDLY"); Else; Ach.Award("TONKAR_FRIENDLYNO"); End
		if !TBS_DidStack;Ach.Award("TONKAR_DIDSTACK"); End
		if TBS_StackLimit!=0;Ach.Award("TONKAR_STACK"..TBS_StackLimit); End
		If TBS_Moves==100;Ach.Award("TONKAR_OFCENTURY"); End
	End
End

Int __OldTime
Void HandleTime()
	ShowTime(TBS_Time,Graphics.Width div 4,Graphics.Height-30,2)
	Int __NewTime = os.time()
	if TBS_State==0 && Action.List.Have && __OldTime!=__NewTime
		TBS_Time++
		__OldTime = __NewTime
	End
End

Void VictoryState()
	If TBS_State!=1; Return; End
	ESC.Draw(Graphics.W div 2,Graphics.H div 2)
	Int DX=(Graphics.W div 2) - 96
	Int DY=Graphics.H-96	
	If MX>DX && MY>DY && MX<DX+96
		SetColorHSV(Hue,1,1)
		If ML
			GoToFlow("SELECTGAME")
		End
	End
	OKE.Stretch(DX,DY,96,96)
End

Void UndoButton()
	If (!Action.List.Have) || TBS_State!=0; Return; End
	if MX<64 && MY>Graphics.H-64
		SetColorHSV(Hue,1,1)
		If ML
			plua Act = Action.List.Pop()
			Switch Act.Act
				Case "AUTOUNSTACK"
					plua cc
					cc = Act.ToR[len(Act.ToR)-1]
					Act.ToR[len(Act.ToR)-1] = nil
					TBS_Stack[len(TBS_Stack)]=cc
					// This is very extremely dirty, but the easiest 
					// way to get things done
					Act = Action.List.Pop()
					FallThrough
				Case "MOVE"
					for i,v in ipairs(Act.Cards)
						Act.ToR[Len(Act.ToR)-1]=nil
						Append(Act.FromR,v)
					End
					for i,v in ipairs(Act.FromR)
						v.Visible = i>=Act.Hidden
					End
					TBS_UnDone++
				Default; Lua.error("Unknown action!")
			End
		End
	End
	UND.Stretch(0,Graphics.H-64,64,64)
End

#Region Callbacks
Global Bool GAMEFEATURES_SAVEEXIT_ALLOW(); Return TBS_State==0; End

Global Void GAMEFEATURES_SAVEEXIT_ACTION()
	string TBS = "# Save game data for - Da Tonkars ba sol\n# (c) Jeroen P. Broks\n\n"
	TBS = TBS .. sprintf("[General]\nGame=TBS\nMoves=%d\nTime=%d\nUndone=%d\nStackLimit=%d\nFriendlyStack=%s\nDidStack=%s\n\n",TBS_Moves,TBS_Time,TBS_Undone,TBS_StackLimit,TBS_FriendlyStack,TBS_DidStack)
	TBS = TBS .. "[Tableau]\n\n*list:Stack\n"
	for ci,cc in ipairs(TBS_Stack); TBS = TBS .. sprintf("\t%x%xt\n",cc.Elem,cc.Val); End
	TBS = TBS .. "*end\n\n"
	for ri,ra in ipairs(TBS_Row)
		TBS = TBS .. sprintf("*list:R%d\n",ri)
		for ci,cc in ipairs(ra)
			TBS = TBS .. sprintf("\t%x%x%s\n",cc.Elem,cc.Val,cc.Visible)
		end
		TBS = TBS .. "*end\n\n"
	end
	plua SG = SGJCR.Create("SAVE:TBS")
	SG.Assign("House Of Cards.SaveGame.Tonkar ba sol.jcr")
	SG.Clear()
	SG.Text.TBS = TBS
	SG.Save()
	GotoFlow("SELECTGAME")
End

Global Void GameContinue()
	plua SG = SGJCR.Create("LOAD:TBS")
	plua SD
	CSay("Loading savegame")
	SG.Assign("House Of Cards.SaveGame.Tonkar ba sol.jcr")
	SG.Load()
	CSay("= Parsing")
	SD = GINIE.Parse(SG.Text.TBS,"TBS_Parseout")
	CSay("= Checking")
	Lua.assert(SD.Value("General","Game")=="TBS","Is this savegame file for: Tonkars ba sol?")
	CSay("= General")
	SD.NewValue("General","FriendlyStack","true") // Fix older savegames
	TBS_Moves         = SD.IntValue("General","Moves")
	TBS_Undone        = SD.IntValue("General","Undone")
	TBS_Time          = SD.IntValue("General","Time")
	TBS_StackLimit    = SD.IntValue("General","StackLimit")
	TBS_FriendlyStack = SD.BoolValue("General","FriendlyStack")
	TBS_DidStack      = SD.BOOLValue("GENERAL","DidStack")
	plua CL
	CSay("= Stack")
	CL = SD.List("Tableau","Stack")
	TBS_Stack = {}
	For v in Each(CL)
		Append(TBS_Stack,new TBS_Card(new DeckCard(Lua.tonumber(Mid(V,1,1)),Lua.tonumber("0x"..Mid(V,2,1)))))
	End
	TBS_Row = {}
	For ri=0,9
		CSayF("= Row: %d",ri)
		plua ra = {}
		TBS_Row[ri] = ra
		CL = SD.List("Tableau","R"..ri)
		For v in each(CL)
			plua crd
			crd = new TBS_Card(new DeckCard(Lua.tonumber(Mid(V,1,1)),Lua.tonumber("0x"..Mid(V,2,1))))
			crd.Visible = lower(Mid(v,3,1))=="t"
			Append(ra,crd)
		End
	End
End

Global Void GameNew()
	TBS_Deck = Deck.Shuffle("DECK_TonkarBaSol",TBS_Config.Value("Shuffle","Shuffle"),1,15,1,4)
	Deal()
	TBS_Moves = 0
	TBS_Time = 0
	TBS_Undone = 0
	TBS_State = 0
	TBS_Stack = {}
	TBS_DidStack = False
End

Global Void MainFlow()	
	Hue = (Hue+1)%360	
	SetColor(0,255,0); TBS_BackGround.Stretch(0,0,Graphics.Width,Graphics.Height)	
	SetColor(255,255,255) 
	If MAS; MAS.Stretch(Graphics.Width-MSW,0,MSW,MSH); End
	If ICO; ICO.Stretch(Graphics.Width-96,Graphics.Height-96,96,96); End
	SetColorHSV(120,0.75+(xmath.sin(hue)*0.25),1)
	FNT.Dark("D|^a T|^onk|^ars b|^a sol",Graphics.width div 2,4,2)
	HandleTime()
	ShowMoves(TBS_Moves,TBS_Undone,(Graphics.Width div 4)*3,Graphics.Height-30,2)
	DrawCards()
	GameFeatures.Button()
	UndoButton()
	VictoryState()
	ShowMouse()
End
#endregion