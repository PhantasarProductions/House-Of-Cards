// License Information:
// House Of Cards
// Memory - Main Game
// 
// 
// 
// (c) Jeroen P. Broks, 2024
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 24.03.23
// End License Information
Script

#use "Libs/SCI/GINIE"
#use "Libs/SCI/Graphics"

#use "Script/Use/Gen/Muis"
#use "Script/Use/Gen/RText"
#use "Script/Use/Gen/Config"
#use "Script/Use/Gen/GameFeatures"

#use "Script/Use/Lnk/Card"

#use "Script/Game/Memory/Field"
#use "Script/Game/Memory/StartGame"
#use "Script/Game/Memory/MemoryCards"

ReadOnly Var ICO = LoadNewImage("Script/Game/Memory/Icon.png","MEMORY_ICON")

Global Var MEM_Config = GINIE.Obtain("CONFIG::MEMORY")

Global Int MEM_Score
Global Int MEM_Time
Global Int MEM_Matches
Global Int MEM_Left
Global Int Hue = os.time()

global int MEM_OldTime
Global Bool MEM_RunTime

Get Var MEM_Deck;return MemoryCards.CurrentDeck; end
Get Var MEM_Card;return MemoryCards.CurrentSize; end

plua MEM_Visible = {}
int MEM_ShowTime
Bool Visible(int X,Int Y)
	if len(MEM_Visible)>=2
		MEM_ShowTime--
		if Mem_ShowTime==0; Mem_Visible={}; End
	End
	For v in each(MEM_Visible)
		if v.x==x && v.y==y; return true; end
	End
	return false
End
Bool Show(int X,Int Y)
	Switch Len(Mem_Visible)
		Case 2
			Mem_Visible = {}
			Show(X,Y)
		Case 1
			Mem_ShowTime=1000
			FallThrough
		case 0
			Mem_Visible[Len(Mem_Visible)]={["x"]=X,["y"]=Y}
		default
			printf("\1xb[31mERROR!\x1b[37mVisibility overload (%d), resetting\n",Len(Mem_Visible))
			Mem_Visible = {}
	End
End


Void DrawCards()
	For _y=0,Field.FH-1
		For _x=0,Field.FW-1
			int dx;dx =_x*Mem_Card.w
			int dy;dy =_y*Mem_Card.h
			If Visible(_x,_Y)
				SetColor(255,255,255)
				Mem_Deck.DrawCard(dx,dy,Field.XC(_x,_y))				
			ElIf !Field.Cleared(_x,_y)
				SetColor(255,255,255)
				Mem_Deck.DrawBack(dx,dy)
				If MX>dx && MY>dy && MX<dx+Mem_Deck.W && MY<Mem_Deck.H+dy
					SetColorHSV(Hue,1,1)					
					Rect(dx,dy,Mem_Deck.W,Mem_Deck.H,1)
					If ML
						Show(_x,_y)
					End
				End	
			End
		End
	End
	SetColor(255,255,255)
End

Global Void MainFlow()
	hue = (hue+1)%360
	SetColor(255,255,255,255)
	DrawBackground()
	DrawCards()
	ICO.Stretch(Graphics.Width-64,Graphics.Height-64,64,64)
	ShowTime(MEM_Time,0,Graphics.Height-30)
	ShowScore(MEM_Score,Graphics.Width div 3,Graphics.Height-30,2)
	GameFeatures.Button()
	ShowMouse()	
End